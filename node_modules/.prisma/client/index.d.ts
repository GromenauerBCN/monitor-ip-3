
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model MonitorTarget
 * 
 */
export type MonitorTarget = $Result.DefaultSelection<Prisma.$MonitorTargetPayload>
/**
 * Model CheckResult
 * 
 */
export type CheckResult = $Result.DefaultSelection<Prisma.$CheckResultPayload>
/**
 * Model NotificationSettings
 * 
 */
export type NotificationSettings = $Result.DefaultSelection<Prisma.$NotificationSettingsPayload>
/**
 * Model PushDevice
 * 
 */
export type PushDevice = $Result.DefaultSelection<Prisma.$PushDevicePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.monitorTarget`: Exposes CRUD operations for the **MonitorTarget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MonitorTargets
    * const monitorTargets = await prisma.monitorTarget.findMany()
    * ```
    */
  get monitorTarget(): Prisma.MonitorTargetDelegate<ExtArgs>;

  /**
   * `prisma.checkResult`: Exposes CRUD operations for the **CheckResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckResults
    * const checkResults = await prisma.checkResult.findMany()
    * ```
    */
  get checkResult(): Prisma.CheckResultDelegate<ExtArgs>;

  /**
   * `prisma.notificationSettings`: Exposes CRUD operations for the **NotificationSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationSettings
    * const notificationSettings = await prisma.notificationSettings.findMany()
    * ```
    */
  get notificationSettings(): Prisma.NotificationSettingsDelegate<ExtArgs>;

  /**
   * `prisma.pushDevice`: Exposes CRUD operations for the **PushDevice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PushDevices
    * const pushDevices = await prisma.pushDevice.findMany()
    * ```
    */
  get pushDevice(): Prisma.PushDeviceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    MonitorTarget: 'MonitorTarget',
    CheckResult: 'CheckResult',
    NotificationSettings: 'NotificationSettings',
    PushDevice: 'PushDevice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "monitorTarget" | "checkResult" | "notificationSettings" | "pushDevice"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      MonitorTarget: {
        payload: Prisma.$MonitorTargetPayload<ExtArgs>
        fields: Prisma.MonitorTargetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MonitorTargetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MonitorTargetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload>
          }
          findFirst: {
            args: Prisma.MonitorTargetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MonitorTargetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload>
          }
          findMany: {
            args: Prisma.MonitorTargetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload>[]
          }
          create: {
            args: Prisma.MonitorTargetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload>
          }
          createMany: {
            args: Prisma.MonitorTargetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MonitorTargetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload>[]
          }
          delete: {
            args: Prisma.MonitorTargetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload>
          }
          update: {
            args: Prisma.MonitorTargetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload>
          }
          deleteMany: {
            args: Prisma.MonitorTargetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MonitorTargetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MonitorTargetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitorTargetPayload>
          }
          aggregate: {
            args: Prisma.MonitorTargetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMonitorTarget>
          }
          groupBy: {
            args: Prisma.MonitorTargetGroupByArgs<ExtArgs>
            result: $Utils.Optional<MonitorTargetGroupByOutputType>[]
          }
          count: {
            args: Prisma.MonitorTargetCountArgs<ExtArgs>
            result: $Utils.Optional<MonitorTargetCountAggregateOutputType> | number
          }
        }
      }
      CheckResult: {
        payload: Prisma.$CheckResultPayload<ExtArgs>
        fields: Prisma.CheckResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheckResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheckResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload>
          }
          findFirst: {
            args: Prisma.CheckResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheckResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload>
          }
          findMany: {
            args: Prisma.CheckResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload>[]
          }
          create: {
            args: Prisma.CheckResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload>
          }
          createMany: {
            args: Prisma.CheckResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CheckResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload>[]
          }
          delete: {
            args: Prisma.CheckResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload>
          }
          update: {
            args: Prisma.CheckResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload>
          }
          deleteMany: {
            args: Prisma.CheckResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CheckResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CheckResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckResultPayload>
          }
          aggregate: {
            args: Prisma.CheckResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCheckResult>
          }
          groupBy: {
            args: Prisma.CheckResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<CheckResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.CheckResultCountArgs<ExtArgs>
            result: $Utils.Optional<CheckResultCountAggregateOutputType> | number
          }
        }
      }
      NotificationSettings: {
        payload: Prisma.$NotificationSettingsPayload<ExtArgs>
        fields: Prisma.NotificationSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          findFirst: {
            args: Prisma.NotificationSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          findMany: {
            args: Prisma.NotificationSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          create: {
            args: Prisma.NotificationSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          createMany: {
            args: Prisma.NotificationSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          delete: {
            args: Prisma.NotificationSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          update: {
            args: Prisma.NotificationSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          aggregate: {
            args: Prisma.NotificationSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationSettings>
          }
          groupBy: {
            args: Prisma.NotificationSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingsCountAggregateOutputType> | number
          }
        }
      }
      PushDevice: {
        payload: Prisma.$PushDevicePayload<ExtArgs>
        fields: Prisma.PushDeviceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PushDeviceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PushDeviceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload>
          }
          findFirst: {
            args: Prisma.PushDeviceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PushDeviceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload>
          }
          findMany: {
            args: Prisma.PushDeviceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload>[]
          }
          create: {
            args: Prisma.PushDeviceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload>
          }
          createMany: {
            args: Prisma.PushDeviceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PushDeviceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload>[]
          }
          delete: {
            args: Prisma.PushDeviceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload>
          }
          update: {
            args: Prisma.PushDeviceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload>
          }
          deleteMany: {
            args: Prisma.PushDeviceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PushDeviceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PushDeviceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PushDevicePayload>
          }
          aggregate: {
            args: Prisma.PushDeviceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePushDevice>
          }
          groupBy: {
            args: Prisma.PushDeviceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PushDeviceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PushDeviceCountArgs<ExtArgs>
            result: $Utils.Optional<PushDeviceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    monitors: number
    devices: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monitors?: boolean | UserCountOutputTypeCountMonitorsArgs
    devices?: boolean | UserCountOutputTypeCountDevicesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMonitorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonitorTargetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDevicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PushDeviceWhereInput
  }


  /**
   * Count Type MonitorTargetCountOutputType
   */

  export type MonitorTargetCountOutputType = {
    checks: number
  }

  export type MonitorTargetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checks?: boolean | MonitorTargetCountOutputTypeCountChecksArgs
  }

  // Custom InputTypes
  /**
   * MonitorTargetCountOutputType without action
   */
  export type MonitorTargetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTargetCountOutputType
     */
    select?: MonitorTargetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MonitorTargetCountOutputType without action
   */
  export type MonitorTargetCountOutputTypeCountChecksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckResultWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    monitors?: boolean | User$monitorsArgs<ExtArgs>
    notif?: boolean | User$notifArgs<ExtArgs>
    devices?: boolean | User$devicesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monitors?: boolean | User$monitorsArgs<ExtArgs>
    notif?: boolean | User$notifArgs<ExtArgs>
    devices?: boolean | User$devicesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      monitors: Prisma.$MonitorTargetPayload<ExtArgs>[]
      notif: Prisma.$NotificationSettingsPayload<ExtArgs> | null
      devices: Prisma.$PushDevicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    monitors<T extends User$monitorsArgs<ExtArgs> = {}>(args?: Subset<T, User$monitorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "findMany"> | Null>
    notif<T extends User$notifArgs<ExtArgs> = {}>(args?: Subset<T, User$notifArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    devices<T extends User$devicesArgs<ExtArgs> = {}>(args?: Subset<T, User$devicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.monitors
   */
  export type User$monitorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    where?: MonitorTargetWhereInput
    orderBy?: MonitorTargetOrderByWithRelationInput | MonitorTargetOrderByWithRelationInput[]
    cursor?: MonitorTargetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MonitorTargetScalarFieldEnum | MonitorTargetScalarFieldEnum[]
  }

  /**
   * User.notif
   */
  export type User$notifArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    where?: NotificationSettingsWhereInput
  }

  /**
   * User.devices
   */
  export type User$devicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    where?: PushDeviceWhereInput
    orderBy?: PushDeviceOrderByWithRelationInput | PushDeviceOrderByWithRelationInput[]
    cursor?: PushDeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PushDeviceScalarFieldEnum | PushDeviceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model MonitorTarget
   */

  export type AggregateMonitorTarget = {
    _count: MonitorTargetCountAggregateOutputType | null
    _avg: MonitorTargetAvgAggregateOutputType | null
    _sum: MonitorTargetSumAggregateOutputType | null
    _min: MonitorTargetMinAggregateOutputType | null
    _max: MonitorTargetMaxAggregateOutputType | null
  }

  export type MonitorTargetAvgAggregateOutputType = {
    port: number | null
    intervalMinutes: number | null
  }

  export type MonitorTargetSumAggregateOutputType = {
    port: number | null
    intervalMinutes: number | null
  }

  export type MonitorTargetMinAggregateOutputType = {
    id: string | null
    userId: string | null
    label: string | null
    kind: string | null
    address: string | null
    port: number | null
    intervalMinutes: number | null
    enabled: boolean | null
    lastCheckedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    lastStatus: string | null
    lastAlertAt: Date | null
  }

  export type MonitorTargetMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    label: string | null
    kind: string | null
    address: string | null
    port: number | null
    intervalMinutes: number | null
    enabled: boolean | null
    lastCheckedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    lastStatus: string | null
    lastAlertAt: Date | null
  }

  export type MonitorTargetCountAggregateOutputType = {
    id: number
    userId: number
    label: number
    kind: number
    address: number
    port: number
    intervalMinutes: number
    enabled: number
    lastCheckedAt: number
    createdAt: number
    updatedAt: number
    lastStatus: number
    lastAlertAt: number
    _all: number
  }


  export type MonitorTargetAvgAggregateInputType = {
    port?: true
    intervalMinutes?: true
  }

  export type MonitorTargetSumAggregateInputType = {
    port?: true
    intervalMinutes?: true
  }

  export type MonitorTargetMinAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    kind?: true
    address?: true
    port?: true
    intervalMinutes?: true
    enabled?: true
    lastCheckedAt?: true
    createdAt?: true
    updatedAt?: true
    lastStatus?: true
    lastAlertAt?: true
  }

  export type MonitorTargetMaxAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    kind?: true
    address?: true
    port?: true
    intervalMinutes?: true
    enabled?: true
    lastCheckedAt?: true
    createdAt?: true
    updatedAt?: true
    lastStatus?: true
    lastAlertAt?: true
  }

  export type MonitorTargetCountAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    kind?: true
    address?: true
    port?: true
    intervalMinutes?: true
    enabled?: true
    lastCheckedAt?: true
    createdAt?: true
    updatedAt?: true
    lastStatus?: true
    lastAlertAt?: true
    _all?: true
  }

  export type MonitorTargetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MonitorTarget to aggregate.
     */
    where?: MonitorTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonitorTargets to fetch.
     */
    orderBy?: MonitorTargetOrderByWithRelationInput | MonitorTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MonitorTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonitorTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonitorTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MonitorTargets
    **/
    _count?: true | MonitorTargetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MonitorTargetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MonitorTargetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MonitorTargetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MonitorTargetMaxAggregateInputType
  }

  export type GetMonitorTargetAggregateType<T extends MonitorTargetAggregateArgs> = {
        [P in keyof T & keyof AggregateMonitorTarget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonitorTarget[P]>
      : GetScalarType<T[P], AggregateMonitorTarget[P]>
  }




  export type MonitorTargetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonitorTargetWhereInput
    orderBy?: MonitorTargetOrderByWithAggregationInput | MonitorTargetOrderByWithAggregationInput[]
    by: MonitorTargetScalarFieldEnum[] | MonitorTargetScalarFieldEnum
    having?: MonitorTargetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MonitorTargetCountAggregateInputType | true
    _avg?: MonitorTargetAvgAggregateInputType
    _sum?: MonitorTargetSumAggregateInputType
    _min?: MonitorTargetMinAggregateInputType
    _max?: MonitorTargetMaxAggregateInputType
  }

  export type MonitorTargetGroupByOutputType = {
    id: string
    userId: string
    label: string
    kind: string
    address: string
    port: number | null
    intervalMinutes: number
    enabled: boolean
    lastCheckedAt: Date | null
    createdAt: Date
    updatedAt: Date
    lastStatus: string | null
    lastAlertAt: Date | null
    _count: MonitorTargetCountAggregateOutputType | null
    _avg: MonitorTargetAvgAggregateOutputType | null
    _sum: MonitorTargetSumAggregateOutputType | null
    _min: MonitorTargetMinAggregateOutputType | null
    _max: MonitorTargetMaxAggregateOutputType | null
  }

  type GetMonitorTargetGroupByPayload<T extends MonitorTargetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MonitorTargetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MonitorTargetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MonitorTargetGroupByOutputType[P]>
            : GetScalarType<T[P], MonitorTargetGroupByOutputType[P]>
        }
      >
    >


  export type MonitorTargetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    kind?: boolean
    address?: boolean
    port?: boolean
    intervalMinutes?: boolean
    enabled?: boolean
    lastCheckedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastStatus?: boolean
    lastAlertAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    checks?: boolean | MonitorTarget$checksArgs<ExtArgs>
    _count?: boolean | MonitorTargetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monitorTarget"]>

  export type MonitorTargetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    kind?: boolean
    address?: boolean
    port?: boolean
    intervalMinutes?: boolean
    enabled?: boolean
    lastCheckedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastStatus?: boolean
    lastAlertAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monitorTarget"]>

  export type MonitorTargetSelectScalar = {
    id?: boolean
    userId?: boolean
    label?: boolean
    kind?: boolean
    address?: boolean
    port?: boolean
    intervalMinutes?: boolean
    enabled?: boolean
    lastCheckedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastStatus?: boolean
    lastAlertAt?: boolean
  }

  export type MonitorTargetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    checks?: boolean | MonitorTarget$checksArgs<ExtArgs>
    _count?: boolean | MonitorTargetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MonitorTargetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MonitorTargetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MonitorTarget"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      checks: Prisma.$CheckResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      label: string
      kind: string
      address: string
      port: number | null
      intervalMinutes: number
      enabled: boolean
      lastCheckedAt: Date | null
      createdAt: Date
      updatedAt: Date
      lastStatus: string | null
      lastAlertAt: Date | null
    }, ExtArgs["result"]["monitorTarget"]>
    composites: {}
  }

  type MonitorTargetGetPayload<S extends boolean | null | undefined | MonitorTargetDefaultArgs> = $Result.GetResult<Prisma.$MonitorTargetPayload, S>

  type MonitorTargetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MonitorTargetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MonitorTargetCountAggregateInputType | true
    }

  export interface MonitorTargetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MonitorTarget'], meta: { name: 'MonitorTarget' } }
    /**
     * Find zero or one MonitorTarget that matches the filter.
     * @param {MonitorTargetFindUniqueArgs} args - Arguments to find a MonitorTarget
     * @example
     * // Get one MonitorTarget
     * const monitorTarget = await prisma.monitorTarget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MonitorTargetFindUniqueArgs>(args: SelectSubset<T, MonitorTargetFindUniqueArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MonitorTarget that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MonitorTargetFindUniqueOrThrowArgs} args - Arguments to find a MonitorTarget
     * @example
     * // Get one MonitorTarget
     * const monitorTarget = await prisma.monitorTarget.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MonitorTargetFindUniqueOrThrowArgs>(args: SelectSubset<T, MonitorTargetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MonitorTarget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitorTargetFindFirstArgs} args - Arguments to find a MonitorTarget
     * @example
     * // Get one MonitorTarget
     * const monitorTarget = await prisma.monitorTarget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MonitorTargetFindFirstArgs>(args?: SelectSubset<T, MonitorTargetFindFirstArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MonitorTarget that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitorTargetFindFirstOrThrowArgs} args - Arguments to find a MonitorTarget
     * @example
     * // Get one MonitorTarget
     * const monitorTarget = await prisma.monitorTarget.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MonitorTargetFindFirstOrThrowArgs>(args?: SelectSubset<T, MonitorTargetFindFirstOrThrowArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MonitorTargets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitorTargetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MonitorTargets
     * const monitorTargets = await prisma.monitorTarget.findMany()
     * 
     * // Get first 10 MonitorTargets
     * const monitorTargets = await prisma.monitorTarget.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monitorTargetWithIdOnly = await prisma.monitorTarget.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MonitorTargetFindManyArgs>(args?: SelectSubset<T, MonitorTargetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MonitorTarget.
     * @param {MonitorTargetCreateArgs} args - Arguments to create a MonitorTarget.
     * @example
     * // Create one MonitorTarget
     * const MonitorTarget = await prisma.monitorTarget.create({
     *   data: {
     *     // ... data to create a MonitorTarget
     *   }
     * })
     * 
     */
    create<T extends MonitorTargetCreateArgs>(args: SelectSubset<T, MonitorTargetCreateArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MonitorTargets.
     * @param {MonitorTargetCreateManyArgs} args - Arguments to create many MonitorTargets.
     * @example
     * // Create many MonitorTargets
     * const monitorTarget = await prisma.monitorTarget.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MonitorTargetCreateManyArgs>(args?: SelectSubset<T, MonitorTargetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MonitorTargets and returns the data saved in the database.
     * @param {MonitorTargetCreateManyAndReturnArgs} args - Arguments to create many MonitorTargets.
     * @example
     * // Create many MonitorTargets
     * const monitorTarget = await prisma.monitorTarget.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MonitorTargets and only return the `id`
     * const monitorTargetWithIdOnly = await prisma.monitorTarget.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MonitorTargetCreateManyAndReturnArgs>(args?: SelectSubset<T, MonitorTargetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MonitorTarget.
     * @param {MonitorTargetDeleteArgs} args - Arguments to delete one MonitorTarget.
     * @example
     * // Delete one MonitorTarget
     * const MonitorTarget = await prisma.monitorTarget.delete({
     *   where: {
     *     // ... filter to delete one MonitorTarget
     *   }
     * })
     * 
     */
    delete<T extends MonitorTargetDeleteArgs>(args: SelectSubset<T, MonitorTargetDeleteArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MonitorTarget.
     * @param {MonitorTargetUpdateArgs} args - Arguments to update one MonitorTarget.
     * @example
     * // Update one MonitorTarget
     * const monitorTarget = await prisma.monitorTarget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MonitorTargetUpdateArgs>(args: SelectSubset<T, MonitorTargetUpdateArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MonitorTargets.
     * @param {MonitorTargetDeleteManyArgs} args - Arguments to filter MonitorTargets to delete.
     * @example
     * // Delete a few MonitorTargets
     * const { count } = await prisma.monitorTarget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MonitorTargetDeleteManyArgs>(args?: SelectSubset<T, MonitorTargetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MonitorTargets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitorTargetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MonitorTargets
     * const monitorTarget = await prisma.monitorTarget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MonitorTargetUpdateManyArgs>(args: SelectSubset<T, MonitorTargetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MonitorTarget.
     * @param {MonitorTargetUpsertArgs} args - Arguments to update or create a MonitorTarget.
     * @example
     * // Update or create a MonitorTarget
     * const monitorTarget = await prisma.monitorTarget.upsert({
     *   create: {
     *     // ... data to create a MonitorTarget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MonitorTarget we want to update
     *   }
     * })
     */
    upsert<T extends MonitorTargetUpsertArgs>(args: SelectSubset<T, MonitorTargetUpsertArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MonitorTargets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitorTargetCountArgs} args - Arguments to filter MonitorTargets to count.
     * @example
     * // Count the number of MonitorTargets
     * const count = await prisma.monitorTarget.count({
     *   where: {
     *     // ... the filter for the MonitorTargets we want to count
     *   }
     * })
    **/
    count<T extends MonitorTargetCountArgs>(
      args?: Subset<T, MonitorTargetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MonitorTargetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MonitorTarget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitorTargetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MonitorTargetAggregateArgs>(args: Subset<T, MonitorTargetAggregateArgs>): Prisma.PrismaPromise<GetMonitorTargetAggregateType<T>>

    /**
     * Group by MonitorTarget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitorTargetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MonitorTargetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MonitorTargetGroupByArgs['orderBy'] }
        : { orderBy?: MonitorTargetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MonitorTargetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonitorTargetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MonitorTarget model
   */
  readonly fields: MonitorTargetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MonitorTarget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MonitorTargetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    checks<T extends MonitorTarget$checksArgs<ExtArgs> = {}>(args?: Subset<T, MonitorTarget$checksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MonitorTarget model
   */ 
  interface MonitorTargetFieldRefs {
    readonly id: FieldRef<"MonitorTarget", 'String'>
    readonly userId: FieldRef<"MonitorTarget", 'String'>
    readonly label: FieldRef<"MonitorTarget", 'String'>
    readonly kind: FieldRef<"MonitorTarget", 'String'>
    readonly address: FieldRef<"MonitorTarget", 'String'>
    readonly port: FieldRef<"MonitorTarget", 'Int'>
    readonly intervalMinutes: FieldRef<"MonitorTarget", 'Int'>
    readonly enabled: FieldRef<"MonitorTarget", 'Boolean'>
    readonly lastCheckedAt: FieldRef<"MonitorTarget", 'DateTime'>
    readonly createdAt: FieldRef<"MonitorTarget", 'DateTime'>
    readonly updatedAt: FieldRef<"MonitorTarget", 'DateTime'>
    readonly lastStatus: FieldRef<"MonitorTarget", 'String'>
    readonly lastAlertAt: FieldRef<"MonitorTarget", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MonitorTarget findUnique
   */
  export type MonitorTargetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * Filter, which MonitorTarget to fetch.
     */
    where: MonitorTargetWhereUniqueInput
  }

  /**
   * MonitorTarget findUniqueOrThrow
   */
  export type MonitorTargetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * Filter, which MonitorTarget to fetch.
     */
    where: MonitorTargetWhereUniqueInput
  }

  /**
   * MonitorTarget findFirst
   */
  export type MonitorTargetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * Filter, which MonitorTarget to fetch.
     */
    where?: MonitorTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonitorTargets to fetch.
     */
    orderBy?: MonitorTargetOrderByWithRelationInput | MonitorTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonitorTargets.
     */
    cursor?: MonitorTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonitorTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonitorTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonitorTargets.
     */
    distinct?: MonitorTargetScalarFieldEnum | MonitorTargetScalarFieldEnum[]
  }

  /**
   * MonitorTarget findFirstOrThrow
   */
  export type MonitorTargetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * Filter, which MonitorTarget to fetch.
     */
    where?: MonitorTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonitorTargets to fetch.
     */
    orderBy?: MonitorTargetOrderByWithRelationInput | MonitorTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonitorTargets.
     */
    cursor?: MonitorTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonitorTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonitorTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonitorTargets.
     */
    distinct?: MonitorTargetScalarFieldEnum | MonitorTargetScalarFieldEnum[]
  }

  /**
   * MonitorTarget findMany
   */
  export type MonitorTargetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * Filter, which MonitorTargets to fetch.
     */
    where?: MonitorTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonitorTargets to fetch.
     */
    orderBy?: MonitorTargetOrderByWithRelationInput | MonitorTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MonitorTargets.
     */
    cursor?: MonitorTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonitorTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonitorTargets.
     */
    skip?: number
    distinct?: MonitorTargetScalarFieldEnum | MonitorTargetScalarFieldEnum[]
  }

  /**
   * MonitorTarget create
   */
  export type MonitorTargetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * The data needed to create a MonitorTarget.
     */
    data: XOR<MonitorTargetCreateInput, MonitorTargetUncheckedCreateInput>
  }

  /**
   * MonitorTarget createMany
   */
  export type MonitorTargetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MonitorTargets.
     */
    data: MonitorTargetCreateManyInput | MonitorTargetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MonitorTarget createManyAndReturn
   */
  export type MonitorTargetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MonitorTargets.
     */
    data: MonitorTargetCreateManyInput | MonitorTargetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MonitorTarget update
   */
  export type MonitorTargetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * The data needed to update a MonitorTarget.
     */
    data: XOR<MonitorTargetUpdateInput, MonitorTargetUncheckedUpdateInput>
    /**
     * Choose, which MonitorTarget to update.
     */
    where: MonitorTargetWhereUniqueInput
  }

  /**
   * MonitorTarget updateMany
   */
  export type MonitorTargetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MonitorTargets.
     */
    data: XOR<MonitorTargetUpdateManyMutationInput, MonitorTargetUncheckedUpdateManyInput>
    /**
     * Filter which MonitorTargets to update
     */
    where?: MonitorTargetWhereInput
  }

  /**
   * MonitorTarget upsert
   */
  export type MonitorTargetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * The filter to search for the MonitorTarget to update in case it exists.
     */
    where: MonitorTargetWhereUniqueInput
    /**
     * In case the MonitorTarget found by the `where` argument doesn't exist, create a new MonitorTarget with this data.
     */
    create: XOR<MonitorTargetCreateInput, MonitorTargetUncheckedCreateInput>
    /**
     * In case the MonitorTarget was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MonitorTargetUpdateInput, MonitorTargetUncheckedUpdateInput>
  }

  /**
   * MonitorTarget delete
   */
  export type MonitorTargetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
    /**
     * Filter which MonitorTarget to delete.
     */
    where: MonitorTargetWhereUniqueInput
  }

  /**
   * MonitorTarget deleteMany
   */
  export type MonitorTargetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MonitorTargets to delete
     */
    where?: MonitorTargetWhereInput
  }

  /**
   * MonitorTarget.checks
   */
  export type MonitorTarget$checksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    where?: CheckResultWhereInput
    orderBy?: CheckResultOrderByWithRelationInput | CheckResultOrderByWithRelationInput[]
    cursor?: CheckResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckResultScalarFieldEnum | CheckResultScalarFieldEnum[]
  }

  /**
   * MonitorTarget without action
   */
  export type MonitorTargetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitorTarget
     */
    select?: MonitorTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitorTargetInclude<ExtArgs> | null
  }


  /**
   * Model CheckResult
   */

  export type AggregateCheckResult = {
    _count: CheckResultCountAggregateOutputType | null
    _avg: CheckResultAvgAggregateOutputType | null
    _sum: CheckResultSumAggregateOutputType | null
    _min: CheckResultMinAggregateOutputType | null
    _max: CheckResultMaxAggregateOutputType | null
  }

  export type CheckResultAvgAggregateOutputType = {
    latencyMs: number | null
  }

  export type CheckResultSumAggregateOutputType = {
    latencyMs: number | null
  }

  export type CheckResultMinAggregateOutputType = {
    id: string | null
    targetId: string | null
    ok: boolean | null
    latencyMs: number | null
    error: string | null
    checkedAt: Date | null
  }

  export type CheckResultMaxAggregateOutputType = {
    id: string | null
    targetId: string | null
    ok: boolean | null
    latencyMs: number | null
    error: string | null
    checkedAt: Date | null
  }

  export type CheckResultCountAggregateOutputType = {
    id: number
    targetId: number
    ok: number
    latencyMs: number
    error: number
    checkedAt: number
    _all: number
  }


  export type CheckResultAvgAggregateInputType = {
    latencyMs?: true
  }

  export type CheckResultSumAggregateInputType = {
    latencyMs?: true
  }

  export type CheckResultMinAggregateInputType = {
    id?: true
    targetId?: true
    ok?: true
    latencyMs?: true
    error?: true
    checkedAt?: true
  }

  export type CheckResultMaxAggregateInputType = {
    id?: true
    targetId?: true
    ok?: true
    latencyMs?: true
    error?: true
    checkedAt?: true
  }

  export type CheckResultCountAggregateInputType = {
    id?: true
    targetId?: true
    ok?: true
    latencyMs?: true
    error?: true
    checkedAt?: true
    _all?: true
  }

  export type CheckResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckResult to aggregate.
     */
    where?: CheckResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckResults to fetch.
     */
    orderBy?: CheckResultOrderByWithRelationInput | CheckResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheckResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CheckResults
    **/
    _count?: true | CheckResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckResultMaxAggregateInputType
  }

  export type GetCheckResultAggregateType<T extends CheckResultAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckResult[P]>
      : GetScalarType<T[P], AggregateCheckResult[P]>
  }




  export type CheckResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckResultWhereInput
    orderBy?: CheckResultOrderByWithAggregationInput | CheckResultOrderByWithAggregationInput[]
    by: CheckResultScalarFieldEnum[] | CheckResultScalarFieldEnum
    having?: CheckResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckResultCountAggregateInputType | true
    _avg?: CheckResultAvgAggregateInputType
    _sum?: CheckResultSumAggregateInputType
    _min?: CheckResultMinAggregateInputType
    _max?: CheckResultMaxAggregateInputType
  }

  export type CheckResultGroupByOutputType = {
    id: string
    targetId: string
    ok: boolean
    latencyMs: number | null
    error: string | null
    checkedAt: Date
    _count: CheckResultCountAggregateOutputType | null
    _avg: CheckResultAvgAggregateOutputType | null
    _sum: CheckResultSumAggregateOutputType | null
    _min: CheckResultMinAggregateOutputType | null
    _max: CheckResultMaxAggregateOutputType | null
  }

  type GetCheckResultGroupByPayload<T extends CheckResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckResultGroupByOutputType[P]>
            : GetScalarType<T[P], CheckResultGroupByOutputType[P]>
        }
      >
    >


  export type CheckResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetId?: boolean
    ok?: boolean
    latencyMs?: boolean
    error?: boolean
    checkedAt?: boolean
    target?: boolean | MonitorTargetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkResult"]>

  export type CheckResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetId?: boolean
    ok?: boolean
    latencyMs?: boolean
    error?: boolean
    checkedAt?: boolean
    target?: boolean | MonitorTargetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkResult"]>

  export type CheckResultSelectScalar = {
    id?: boolean
    targetId?: boolean
    ok?: boolean
    latencyMs?: boolean
    error?: boolean
    checkedAt?: boolean
  }

  export type CheckResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    target?: boolean | MonitorTargetDefaultArgs<ExtArgs>
  }
  export type CheckResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    target?: boolean | MonitorTargetDefaultArgs<ExtArgs>
  }

  export type $CheckResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CheckResult"
    objects: {
      target: Prisma.$MonitorTargetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      targetId: string
      ok: boolean
      latencyMs: number | null
      error: string | null
      checkedAt: Date
    }, ExtArgs["result"]["checkResult"]>
    composites: {}
  }

  type CheckResultGetPayload<S extends boolean | null | undefined | CheckResultDefaultArgs> = $Result.GetResult<Prisma.$CheckResultPayload, S>

  type CheckResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CheckResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CheckResultCountAggregateInputType | true
    }

  export interface CheckResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckResult'], meta: { name: 'CheckResult' } }
    /**
     * Find zero or one CheckResult that matches the filter.
     * @param {CheckResultFindUniqueArgs} args - Arguments to find a CheckResult
     * @example
     * // Get one CheckResult
     * const checkResult = await prisma.checkResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CheckResultFindUniqueArgs>(args: SelectSubset<T, CheckResultFindUniqueArgs<ExtArgs>>): Prisma__CheckResultClient<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CheckResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CheckResultFindUniqueOrThrowArgs} args - Arguments to find a CheckResult
     * @example
     * // Get one CheckResult
     * const checkResult = await prisma.checkResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CheckResultFindUniqueOrThrowArgs>(args: SelectSubset<T, CheckResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CheckResultClient<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CheckResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckResultFindFirstArgs} args - Arguments to find a CheckResult
     * @example
     * // Get one CheckResult
     * const checkResult = await prisma.checkResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CheckResultFindFirstArgs>(args?: SelectSubset<T, CheckResultFindFirstArgs<ExtArgs>>): Prisma__CheckResultClient<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CheckResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckResultFindFirstOrThrowArgs} args - Arguments to find a CheckResult
     * @example
     * // Get one CheckResult
     * const checkResult = await prisma.checkResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CheckResultFindFirstOrThrowArgs>(args?: SelectSubset<T, CheckResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__CheckResultClient<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CheckResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckResults
     * const checkResults = await prisma.checkResult.findMany()
     * 
     * // Get first 10 CheckResults
     * const checkResults = await prisma.checkResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checkResultWithIdOnly = await prisma.checkResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CheckResultFindManyArgs>(args?: SelectSubset<T, CheckResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CheckResult.
     * @param {CheckResultCreateArgs} args - Arguments to create a CheckResult.
     * @example
     * // Create one CheckResult
     * const CheckResult = await prisma.checkResult.create({
     *   data: {
     *     // ... data to create a CheckResult
     *   }
     * })
     * 
     */
    create<T extends CheckResultCreateArgs>(args: SelectSubset<T, CheckResultCreateArgs<ExtArgs>>): Prisma__CheckResultClient<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CheckResults.
     * @param {CheckResultCreateManyArgs} args - Arguments to create many CheckResults.
     * @example
     * // Create many CheckResults
     * const checkResult = await prisma.checkResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CheckResultCreateManyArgs>(args?: SelectSubset<T, CheckResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CheckResults and returns the data saved in the database.
     * @param {CheckResultCreateManyAndReturnArgs} args - Arguments to create many CheckResults.
     * @example
     * // Create many CheckResults
     * const checkResult = await prisma.checkResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CheckResults and only return the `id`
     * const checkResultWithIdOnly = await prisma.checkResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CheckResultCreateManyAndReturnArgs>(args?: SelectSubset<T, CheckResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CheckResult.
     * @param {CheckResultDeleteArgs} args - Arguments to delete one CheckResult.
     * @example
     * // Delete one CheckResult
     * const CheckResult = await prisma.checkResult.delete({
     *   where: {
     *     // ... filter to delete one CheckResult
     *   }
     * })
     * 
     */
    delete<T extends CheckResultDeleteArgs>(args: SelectSubset<T, CheckResultDeleteArgs<ExtArgs>>): Prisma__CheckResultClient<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CheckResult.
     * @param {CheckResultUpdateArgs} args - Arguments to update one CheckResult.
     * @example
     * // Update one CheckResult
     * const checkResult = await prisma.checkResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CheckResultUpdateArgs>(args: SelectSubset<T, CheckResultUpdateArgs<ExtArgs>>): Prisma__CheckResultClient<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CheckResults.
     * @param {CheckResultDeleteManyArgs} args - Arguments to filter CheckResults to delete.
     * @example
     * // Delete a few CheckResults
     * const { count } = await prisma.checkResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CheckResultDeleteManyArgs>(args?: SelectSubset<T, CheckResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckResults
     * const checkResult = await prisma.checkResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CheckResultUpdateManyArgs>(args: SelectSubset<T, CheckResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CheckResult.
     * @param {CheckResultUpsertArgs} args - Arguments to update or create a CheckResult.
     * @example
     * // Update or create a CheckResult
     * const checkResult = await prisma.checkResult.upsert({
     *   create: {
     *     // ... data to create a CheckResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckResult we want to update
     *   }
     * })
     */
    upsert<T extends CheckResultUpsertArgs>(args: SelectSubset<T, CheckResultUpsertArgs<ExtArgs>>): Prisma__CheckResultClient<$Result.GetResult<Prisma.$CheckResultPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CheckResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckResultCountArgs} args - Arguments to filter CheckResults to count.
     * @example
     * // Count the number of CheckResults
     * const count = await prisma.checkResult.count({
     *   where: {
     *     // ... the filter for the CheckResults we want to count
     *   }
     * })
    **/
    count<T extends CheckResultCountArgs>(
      args?: Subset<T, CheckResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckResultAggregateArgs>(args: Subset<T, CheckResultAggregateArgs>): Prisma.PrismaPromise<GetCheckResultAggregateType<T>>

    /**
     * Group by CheckResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheckResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheckResultGroupByArgs['orderBy'] }
        : { orderBy?: CheckResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheckResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CheckResult model
   */
  readonly fields: CheckResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CheckResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheckResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    target<T extends MonitorTargetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MonitorTargetDefaultArgs<ExtArgs>>): Prisma__MonitorTargetClient<$Result.GetResult<Prisma.$MonitorTargetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CheckResult model
   */ 
  interface CheckResultFieldRefs {
    readonly id: FieldRef<"CheckResult", 'String'>
    readonly targetId: FieldRef<"CheckResult", 'String'>
    readonly ok: FieldRef<"CheckResult", 'Boolean'>
    readonly latencyMs: FieldRef<"CheckResult", 'Int'>
    readonly error: FieldRef<"CheckResult", 'String'>
    readonly checkedAt: FieldRef<"CheckResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CheckResult findUnique
   */
  export type CheckResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * Filter, which CheckResult to fetch.
     */
    where: CheckResultWhereUniqueInput
  }

  /**
   * CheckResult findUniqueOrThrow
   */
  export type CheckResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * Filter, which CheckResult to fetch.
     */
    where: CheckResultWhereUniqueInput
  }

  /**
   * CheckResult findFirst
   */
  export type CheckResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * Filter, which CheckResult to fetch.
     */
    where?: CheckResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckResults to fetch.
     */
    orderBy?: CheckResultOrderByWithRelationInput | CheckResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckResults.
     */
    cursor?: CheckResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckResults.
     */
    distinct?: CheckResultScalarFieldEnum | CheckResultScalarFieldEnum[]
  }

  /**
   * CheckResult findFirstOrThrow
   */
  export type CheckResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * Filter, which CheckResult to fetch.
     */
    where?: CheckResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckResults to fetch.
     */
    orderBy?: CheckResultOrderByWithRelationInput | CheckResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckResults.
     */
    cursor?: CheckResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckResults.
     */
    distinct?: CheckResultScalarFieldEnum | CheckResultScalarFieldEnum[]
  }

  /**
   * CheckResult findMany
   */
  export type CheckResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * Filter, which CheckResults to fetch.
     */
    where?: CheckResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckResults to fetch.
     */
    orderBy?: CheckResultOrderByWithRelationInput | CheckResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CheckResults.
     */
    cursor?: CheckResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckResults.
     */
    skip?: number
    distinct?: CheckResultScalarFieldEnum | CheckResultScalarFieldEnum[]
  }

  /**
   * CheckResult create
   */
  export type CheckResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * The data needed to create a CheckResult.
     */
    data: XOR<CheckResultCreateInput, CheckResultUncheckedCreateInput>
  }

  /**
   * CheckResult createMany
   */
  export type CheckResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CheckResults.
     */
    data: CheckResultCreateManyInput | CheckResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CheckResult createManyAndReturn
   */
  export type CheckResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CheckResults.
     */
    data: CheckResultCreateManyInput | CheckResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckResult update
   */
  export type CheckResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * The data needed to update a CheckResult.
     */
    data: XOR<CheckResultUpdateInput, CheckResultUncheckedUpdateInput>
    /**
     * Choose, which CheckResult to update.
     */
    where: CheckResultWhereUniqueInput
  }

  /**
   * CheckResult updateMany
   */
  export type CheckResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CheckResults.
     */
    data: XOR<CheckResultUpdateManyMutationInput, CheckResultUncheckedUpdateManyInput>
    /**
     * Filter which CheckResults to update
     */
    where?: CheckResultWhereInput
  }

  /**
   * CheckResult upsert
   */
  export type CheckResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * The filter to search for the CheckResult to update in case it exists.
     */
    where: CheckResultWhereUniqueInput
    /**
     * In case the CheckResult found by the `where` argument doesn't exist, create a new CheckResult with this data.
     */
    create: XOR<CheckResultCreateInput, CheckResultUncheckedCreateInput>
    /**
     * In case the CheckResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheckResultUpdateInput, CheckResultUncheckedUpdateInput>
  }

  /**
   * CheckResult delete
   */
  export type CheckResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
    /**
     * Filter which CheckResult to delete.
     */
    where: CheckResultWhereUniqueInput
  }

  /**
   * CheckResult deleteMany
   */
  export type CheckResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckResults to delete
     */
    where?: CheckResultWhereInput
  }

  /**
   * CheckResult without action
   */
  export type CheckResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckResult
     */
    select?: CheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckResultInclude<ExtArgs> | null
  }


  /**
   * Model NotificationSettings
   */

  export type AggregateNotificationSettings = {
    _count: NotificationSettingsCountAggregateOutputType | null
    _min: NotificationSettingsMinAggregateOutputType | null
    _max: NotificationSettingsMaxAggregateOutputType | null
  }

  export type NotificationSettingsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    telegramChatId: string | null
    connectToken: string | null
    dailyDigest: boolean | null
    monthlyDigest: boolean | null
  }

  export type NotificationSettingsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    telegramChatId: string | null
    connectToken: string | null
    dailyDigest: boolean | null
    monthlyDigest: boolean | null
  }

  export type NotificationSettingsCountAggregateOutputType = {
    id: number
    userId: number
    emailRecipients: number
    telegramChatId: number
    connectToken: number
    dailyDigest: number
    monthlyDigest: number
    _all: number
  }


  export type NotificationSettingsMinAggregateInputType = {
    id?: true
    userId?: true
    telegramChatId?: true
    connectToken?: true
    dailyDigest?: true
    monthlyDigest?: true
  }

  export type NotificationSettingsMaxAggregateInputType = {
    id?: true
    userId?: true
    telegramChatId?: true
    connectToken?: true
    dailyDigest?: true
    monthlyDigest?: true
  }

  export type NotificationSettingsCountAggregateInputType = {
    id?: true
    userId?: true
    emailRecipients?: true
    telegramChatId?: true
    connectToken?: true
    dailyDigest?: true
    monthlyDigest?: true
    _all?: true
  }

  export type NotificationSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to aggregate.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationSettings
    **/
    _count?: true | NotificationSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationSettingsMaxAggregateInputType
  }

  export type GetNotificationSettingsAggregateType<T extends NotificationSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationSettings[P]>
      : GetScalarType<T[P], AggregateNotificationSettings[P]>
  }




  export type NotificationSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationSettingsWhereInput
    orderBy?: NotificationSettingsOrderByWithAggregationInput | NotificationSettingsOrderByWithAggregationInput[]
    by: NotificationSettingsScalarFieldEnum[] | NotificationSettingsScalarFieldEnum
    having?: NotificationSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationSettingsCountAggregateInputType | true
    _min?: NotificationSettingsMinAggregateInputType
    _max?: NotificationSettingsMaxAggregateInputType
  }

  export type NotificationSettingsGroupByOutputType = {
    id: string
    userId: string
    emailRecipients: string[]
    telegramChatId: string | null
    connectToken: string | null
    dailyDigest: boolean
    monthlyDigest: boolean
    _count: NotificationSettingsCountAggregateOutputType | null
    _min: NotificationSettingsMinAggregateOutputType | null
    _max: NotificationSettingsMaxAggregateOutputType | null
  }

  type GetNotificationSettingsGroupByPayload<T extends NotificationSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationSettingsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    emailRecipients?: boolean
    telegramChatId?: boolean
    connectToken?: boolean
    dailyDigest?: boolean
    monthlyDigest?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>

  export type NotificationSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    emailRecipients?: boolean
    telegramChatId?: boolean
    connectToken?: boolean
    dailyDigest?: boolean
    monthlyDigest?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>

  export type NotificationSettingsSelectScalar = {
    id?: boolean
    userId?: boolean
    emailRecipients?: boolean
    telegramChatId?: boolean
    connectToken?: boolean
    dailyDigest?: boolean
    monthlyDigest?: boolean
  }

  export type NotificationSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationSettings"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      emailRecipients: string[]
      telegramChatId: string | null
      connectToken: string | null
      dailyDigest: boolean
      monthlyDigest: boolean
    }, ExtArgs["result"]["notificationSettings"]>
    composites: {}
  }

  type NotificationSettingsGetPayload<S extends boolean | null | undefined | NotificationSettingsDefaultArgs> = $Result.GetResult<Prisma.$NotificationSettingsPayload, S>

  type NotificationSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationSettingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationSettingsCountAggregateInputType | true
    }

  export interface NotificationSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationSettings'], meta: { name: 'NotificationSettings' } }
    /**
     * Find zero or one NotificationSettings that matches the filter.
     * @param {NotificationSettingsFindUniqueArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationSettingsFindUniqueArgs>(args: SelectSubset<T, NotificationSettingsFindUniqueArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NotificationSettings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationSettingsFindUniqueOrThrowArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindFirstArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationSettingsFindFirstArgs>(args?: SelectSubset<T, NotificationSettingsFindFirstArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NotificationSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindFirstOrThrowArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findMany()
     * 
     * // Get first 10 NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationSettingsFindManyArgs>(args?: SelectSubset<T, NotificationSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NotificationSettings.
     * @param {NotificationSettingsCreateArgs} args - Arguments to create a NotificationSettings.
     * @example
     * // Create one NotificationSettings
     * const NotificationSettings = await prisma.notificationSettings.create({
     *   data: {
     *     // ... data to create a NotificationSettings
     *   }
     * })
     * 
     */
    create<T extends NotificationSettingsCreateArgs>(args: SelectSubset<T, NotificationSettingsCreateArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NotificationSettings.
     * @param {NotificationSettingsCreateManyArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationSettingsCreateManyArgs>(args?: SelectSubset<T, NotificationSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationSettings and returns the data saved in the database.
     * @param {NotificationSettingsCreateManyAndReturnArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationSettings and only return the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NotificationSettings.
     * @param {NotificationSettingsDeleteArgs} args - Arguments to delete one NotificationSettings.
     * @example
     * // Delete one NotificationSettings
     * const NotificationSettings = await prisma.notificationSettings.delete({
     *   where: {
     *     // ... filter to delete one NotificationSettings
     *   }
     * })
     * 
     */
    delete<T extends NotificationSettingsDeleteArgs>(args: SelectSubset<T, NotificationSettingsDeleteArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NotificationSettings.
     * @param {NotificationSettingsUpdateArgs} args - Arguments to update one NotificationSettings.
     * @example
     * // Update one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationSettingsUpdateArgs>(args: SelectSubset<T, NotificationSettingsUpdateArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NotificationSettings.
     * @param {NotificationSettingsDeleteManyArgs} args - Arguments to filter NotificationSettings to delete.
     * @example
     * // Delete a few NotificationSettings
     * const { count } = await prisma.notificationSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationSettingsDeleteManyArgs>(args?: SelectSubset<T, NotificationSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationSettingsUpdateManyArgs>(args: SelectSubset<T, NotificationSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationSettings.
     * @param {NotificationSettingsUpsertArgs} args - Arguments to update or create a NotificationSettings.
     * @example
     * // Update or create a NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.upsert({
     *   create: {
     *     // ... data to create a NotificationSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationSettings we want to update
     *   }
     * })
     */
    upsert<T extends NotificationSettingsUpsertArgs>(args: SelectSubset<T, NotificationSettingsUpsertArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsCountArgs} args - Arguments to filter NotificationSettings to count.
     * @example
     * // Count the number of NotificationSettings
     * const count = await prisma.notificationSettings.count({
     *   where: {
     *     // ... the filter for the NotificationSettings we want to count
     *   }
     * })
    **/
    count<T extends NotificationSettingsCountArgs>(
      args?: Subset<T, NotificationSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationSettingsAggregateArgs>(args: Subset<T, NotificationSettingsAggregateArgs>): Prisma.PrismaPromise<GetNotificationSettingsAggregateType<T>>

    /**
     * Group by NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationSettingsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationSettings model
   */
  readonly fields: NotificationSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationSettings model
   */ 
  interface NotificationSettingsFieldRefs {
    readonly id: FieldRef<"NotificationSettings", 'String'>
    readonly userId: FieldRef<"NotificationSettings", 'String'>
    readonly emailRecipients: FieldRef<"NotificationSettings", 'String[]'>
    readonly telegramChatId: FieldRef<"NotificationSettings", 'String'>
    readonly connectToken: FieldRef<"NotificationSettings", 'String'>
    readonly dailyDigest: FieldRef<"NotificationSettings", 'Boolean'>
    readonly monthlyDigest: FieldRef<"NotificationSettings", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * NotificationSettings findUnique
   */
  export type NotificationSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings findUniqueOrThrow
   */
  export type NotificationSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings findFirst
   */
  export type NotificationSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings findFirstOrThrow
   */
  export type NotificationSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings findMany
   */
  export type NotificationSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings create
   */
  export type NotificationSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationSettings.
     */
    data: XOR<NotificationSettingsCreateInput, NotificationSettingsUncheckedCreateInput>
  }

  /**
   * NotificationSettings createMany
   */
  export type NotificationSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingsCreateManyInput | NotificationSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationSettings createManyAndReturn
   */
  export type NotificationSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingsCreateManyInput | NotificationSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationSettings update
   */
  export type NotificationSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateInput, NotificationSettingsUncheckedUpdateInput>
    /**
     * Choose, which NotificationSettings to update.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings updateMany
   */
  export type NotificationSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateManyMutationInput, NotificationSettingsUncheckedUpdateManyInput>
    /**
     * Filter which NotificationSettings to update
     */
    where?: NotificationSettingsWhereInput
  }

  /**
   * NotificationSettings upsert
   */
  export type NotificationSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationSettings to update in case it exists.
     */
    where: NotificationSettingsWhereUniqueInput
    /**
     * In case the NotificationSettings found by the `where` argument doesn't exist, create a new NotificationSettings with this data.
     */
    create: XOR<NotificationSettingsCreateInput, NotificationSettingsUncheckedCreateInput>
    /**
     * In case the NotificationSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationSettingsUpdateInput, NotificationSettingsUncheckedUpdateInput>
  }

  /**
   * NotificationSettings delete
   */
  export type NotificationSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter which NotificationSettings to delete.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings deleteMany
   */
  export type NotificationSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to delete
     */
    where?: NotificationSettingsWhereInput
  }

  /**
   * NotificationSettings without action
   */
  export type NotificationSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
  }


  /**
   * Model PushDevice
   */

  export type AggregatePushDevice = {
    _count: PushDeviceCountAggregateOutputType | null
    _min: PushDeviceMinAggregateOutputType | null
    _max: PushDeviceMaxAggregateOutputType | null
  }

  export type PushDeviceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    expoToken: string | null
    createdAt: Date | null
  }

  export type PushDeviceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    expoToken: string | null
    createdAt: Date | null
  }

  export type PushDeviceCountAggregateOutputType = {
    id: number
    userId: number
    expoToken: number
    createdAt: number
    _all: number
  }


  export type PushDeviceMinAggregateInputType = {
    id?: true
    userId?: true
    expoToken?: true
    createdAt?: true
  }

  export type PushDeviceMaxAggregateInputType = {
    id?: true
    userId?: true
    expoToken?: true
    createdAt?: true
  }

  export type PushDeviceCountAggregateInputType = {
    id?: true
    userId?: true
    expoToken?: true
    createdAt?: true
    _all?: true
  }

  export type PushDeviceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PushDevice to aggregate.
     */
    where?: PushDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushDevices to fetch.
     */
    orderBy?: PushDeviceOrderByWithRelationInput | PushDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PushDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PushDevices
    **/
    _count?: true | PushDeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PushDeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PushDeviceMaxAggregateInputType
  }

  export type GetPushDeviceAggregateType<T extends PushDeviceAggregateArgs> = {
        [P in keyof T & keyof AggregatePushDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePushDevice[P]>
      : GetScalarType<T[P], AggregatePushDevice[P]>
  }




  export type PushDeviceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PushDeviceWhereInput
    orderBy?: PushDeviceOrderByWithAggregationInput | PushDeviceOrderByWithAggregationInput[]
    by: PushDeviceScalarFieldEnum[] | PushDeviceScalarFieldEnum
    having?: PushDeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PushDeviceCountAggregateInputType | true
    _min?: PushDeviceMinAggregateInputType
    _max?: PushDeviceMaxAggregateInputType
  }

  export type PushDeviceGroupByOutputType = {
    id: string
    userId: string
    expoToken: string
    createdAt: Date
    _count: PushDeviceCountAggregateOutputType | null
    _min: PushDeviceMinAggregateOutputType | null
    _max: PushDeviceMaxAggregateOutputType | null
  }

  type GetPushDeviceGroupByPayload<T extends PushDeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PushDeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PushDeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PushDeviceGroupByOutputType[P]>
            : GetScalarType<T[P], PushDeviceGroupByOutputType[P]>
        }
      >
    >


  export type PushDeviceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    expoToken?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pushDevice"]>

  export type PushDeviceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    expoToken?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pushDevice"]>

  export type PushDeviceSelectScalar = {
    id?: boolean
    userId?: boolean
    expoToken?: boolean
    createdAt?: boolean
  }

  export type PushDeviceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PushDeviceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PushDevicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PushDevice"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      expoToken: string
      createdAt: Date
    }, ExtArgs["result"]["pushDevice"]>
    composites: {}
  }

  type PushDeviceGetPayload<S extends boolean | null | undefined | PushDeviceDefaultArgs> = $Result.GetResult<Prisma.$PushDevicePayload, S>

  type PushDeviceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PushDeviceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PushDeviceCountAggregateInputType | true
    }

  export interface PushDeviceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PushDevice'], meta: { name: 'PushDevice' } }
    /**
     * Find zero or one PushDevice that matches the filter.
     * @param {PushDeviceFindUniqueArgs} args - Arguments to find a PushDevice
     * @example
     * // Get one PushDevice
     * const pushDevice = await prisma.pushDevice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PushDeviceFindUniqueArgs>(args: SelectSubset<T, PushDeviceFindUniqueArgs<ExtArgs>>): Prisma__PushDeviceClient<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PushDevice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PushDeviceFindUniqueOrThrowArgs} args - Arguments to find a PushDevice
     * @example
     * // Get one PushDevice
     * const pushDevice = await prisma.pushDevice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PushDeviceFindUniqueOrThrowArgs>(args: SelectSubset<T, PushDeviceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PushDeviceClient<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PushDevice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushDeviceFindFirstArgs} args - Arguments to find a PushDevice
     * @example
     * // Get one PushDevice
     * const pushDevice = await prisma.pushDevice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PushDeviceFindFirstArgs>(args?: SelectSubset<T, PushDeviceFindFirstArgs<ExtArgs>>): Prisma__PushDeviceClient<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PushDevice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushDeviceFindFirstOrThrowArgs} args - Arguments to find a PushDevice
     * @example
     * // Get one PushDevice
     * const pushDevice = await prisma.pushDevice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PushDeviceFindFirstOrThrowArgs>(args?: SelectSubset<T, PushDeviceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PushDeviceClient<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PushDevices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushDeviceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PushDevices
     * const pushDevices = await prisma.pushDevice.findMany()
     * 
     * // Get first 10 PushDevices
     * const pushDevices = await prisma.pushDevice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pushDeviceWithIdOnly = await prisma.pushDevice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PushDeviceFindManyArgs>(args?: SelectSubset<T, PushDeviceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PushDevice.
     * @param {PushDeviceCreateArgs} args - Arguments to create a PushDevice.
     * @example
     * // Create one PushDevice
     * const PushDevice = await prisma.pushDevice.create({
     *   data: {
     *     // ... data to create a PushDevice
     *   }
     * })
     * 
     */
    create<T extends PushDeviceCreateArgs>(args: SelectSubset<T, PushDeviceCreateArgs<ExtArgs>>): Prisma__PushDeviceClient<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PushDevices.
     * @param {PushDeviceCreateManyArgs} args - Arguments to create many PushDevices.
     * @example
     * // Create many PushDevices
     * const pushDevice = await prisma.pushDevice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PushDeviceCreateManyArgs>(args?: SelectSubset<T, PushDeviceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PushDevices and returns the data saved in the database.
     * @param {PushDeviceCreateManyAndReturnArgs} args - Arguments to create many PushDevices.
     * @example
     * // Create many PushDevices
     * const pushDevice = await prisma.pushDevice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PushDevices and only return the `id`
     * const pushDeviceWithIdOnly = await prisma.pushDevice.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PushDeviceCreateManyAndReturnArgs>(args?: SelectSubset<T, PushDeviceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PushDevice.
     * @param {PushDeviceDeleteArgs} args - Arguments to delete one PushDevice.
     * @example
     * // Delete one PushDevice
     * const PushDevice = await prisma.pushDevice.delete({
     *   where: {
     *     // ... filter to delete one PushDevice
     *   }
     * })
     * 
     */
    delete<T extends PushDeviceDeleteArgs>(args: SelectSubset<T, PushDeviceDeleteArgs<ExtArgs>>): Prisma__PushDeviceClient<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PushDevice.
     * @param {PushDeviceUpdateArgs} args - Arguments to update one PushDevice.
     * @example
     * // Update one PushDevice
     * const pushDevice = await prisma.pushDevice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PushDeviceUpdateArgs>(args: SelectSubset<T, PushDeviceUpdateArgs<ExtArgs>>): Prisma__PushDeviceClient<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PushDevices.
     * @param {PushDeviceDeleteManyArgs} args - Arguments to filter PushDevices to delete.
     * @example
     * // Delete a few PushDevices
     * const { count } = await prisma.pushDevice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PushDeviceDeleteManyArgs>(args?: SelectSubset<T, PushDeviceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PushDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushDeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PushDevices
     * const pushDevice = await prisma.pushDevice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PushDeviceUpdateManyArgs>(args: SelectSubset<T, PushDeviceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PushDevice.
     * @param {PushDeviceUpsertArgs} args - Arguments to update or create a PushDevice.
     * @example
     * // Update or create a PushDevice
     * const pushDevice = await prisma.pushDevice.upsert({
     *   create: {
     *     // ... data to create a PushDevice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PushDevice we want to update
     *   }
     * })
     */
    upsert<T extends PushDeviceUpsertArgs>(args: SelectSubset<T, PushDeviceUpsertArgs<ExtArgs>>): Prisma__PushDeviceClient<$Result.GetResult<Prisma.$PushDevicePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PushDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushDeviceCountArgs} args - Arguments to filter PushDevices to count.
     * @example
     * // Count the number of PushDevices
     * const count = await prisma.pushDevice.count({
     *   where: {
     *     // ... the filter for the PushDevices we want to count
     *   }
     * })
    **/
    count<T extends PushDeviceCountArgs>(
      args?: Subset<T, PushDeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PushDeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PushDevice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushDeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PushDeviceAggregateArgs>(args: Subset<T, PushDeviceAggregateArgs>): Prisma.PrismaPromise<GetPushDeviceAggregateType<T>>

    /**
     * Group by PushDevice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushDeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PushDeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PushDeviceGroupByArgs['orderBy'] }
        : { orderBy?: PushDeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PushDeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPushDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PushDevice model
   */
  readonly fields: PushDeviceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PushDevice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PushDeviceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PushDevice model
   */ 
  interface PushDeviceFieldRefs {
    readonly id: FieldRef<"PushDevice", 'String'>
    readonly userId: FieldRef<"PushDevice", 'String'>
    readonly expoToken: FieldRef<"PushDevice", 'String'>
    readonly createdAt: FieldRef<"PushDevice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PushDevice findUnique
   */
  export type PushDeviceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * Filter, which PushDevice to fetch.
     */
    where: PushDeviceWhereUniqueInput
  }

  /**
   * PushDevice findUniqueOrThrow
   */
  export type PushDeviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * Filter, which PushDevice to fetch.
     */
    where: PushDeviceWhereUniqueInput
  }

  /**
   * PushDevice findFirst
   */
  export type PushDeviceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * Filter, which PushDevice to fetch.
     */
    where?: PushDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushDevices to fetch.
     */
    orderBy?: PushDeviceOrderByWithRelationInput | PushDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PushDevices.
     */
    cursor?: PushDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PushDevices.
     */
    distinct?: PushDeviceScalarFieldEnum | PushDeviceScalarFieldEnum[]
  }

  /**
   * PushDevice findFirstOrThrow
   */
  export type PushDeviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * Filter, which PushDevice to fetch.
     */
    where?: PushDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushDevices to fetch.
     */
    orderBy?: PushDeviceOrderByWithRelationInput | PushDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PushDevices.
     */
    cursor?: PushDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PushDevices.
     */
    distinct?: PushDeviceScalarFieldEnum | PushDeviceScalarFieldEnum[]
  }

  /**
   * PushDevice findMany
   */
  export type PushDeviceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * Filter, which PushDevices to fetch.
     */
    where?: PushDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PushDevices to fetch.
     */
    orderBy?: PushDeviceOrderByWithRelationInput | PushDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PushDevices.
     */
    cursor?: PushDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PushDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PushDevices.
     */
    skip?: number
    distinct?: PushDeviceScalarFieldEnum | PushDeviceScalarFieldEnum[]
  }

  /**
   * PushDevice create
   */
  export type PushDeviceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * The data needed to create a PushDevice.
     */
    data: XOR<PushDeviceCreateInput, PushDeviceUncheckedCreateInput>
  }

  /**
   * PushDevice createMany
   */
  export type PushDeviceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PushDevices.
     */
    data: PushDeviceCreateManyInput | PushDeviceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PushDevice createManyAndReturn
   */
  export type PushDeviceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PushDevices.
     */
    data: PushDeviceCreateManyInput | PushDeviceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PushDevice update
   */
  export type PushDeviceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * The data needed to update a PushDevice.
     */
    data: XOR<PushDeviceUpdateInput, PushDeviceUncheckedUpdateInput>
    /**
     * Choose, which PushDevice to update.
     */
    where: PushDeviceWhereUniqueInput
  }

  /**
   * PushDevice updateMany
   */
  export type PushDeviceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PushDevices.
     */
    data: XOR<PushDeviceUpdateManyMutationInput, PushDeviceUncheckedUpdateManyInput>
    /**
     * Filter which PushDevices to update
     */
    where?: PushDeviceWhereInput
  }

  /**
   * PushDevice upsert
   */
  export type PushDeviceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * The filter to search for the PushDevice to update in case it exists.
     */
    where: PushDeviceWhereUniqueInput
    /**
     * In case the PushDevice found by the `where` argument doesn't exist, create a new PushDevice with this data.
     */
    create: XOR<PushDeviceCreateInput, PushDeviceUncheckedCreateInput>
    /**
     * In case the PushDevice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PushDeviceUpdateInput, PushDeviceUncheckedUpdateInput>
  }

  /**
   * PushDevice delete
   */
  export type PushDeviceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
    /**
     * Filter which PushDevice to delete.
     */
    where: PushDeviceWhereUniqueInput
  }

  /**
   * PushDevice deleteMany
   */
  export type PushDeviceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PushDevices to delete
     */
    where?: PushDeviceWhereInput
  }

  /**
   * PushDevice without action
   */
  export type PushDeviceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PushDevice
     */
    select?: PushDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PushDeviceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MonitorTargetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    label: 'label',
    kind: 'kind',
    address: 'address',
    port: 'port',
    intervalMinutes: 'intervalMinutes',
    enabled: 'enabled',
    lastCheckedAt: 'lastCheckedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastStatus: 'lastStatus',
    lastAlertAt: 'lastAlertAt'
  };

  export type MonitorTargetScalarFieldEnum = (typeof MonitorTargetScalarFieldEnum)[keyof typeof MonitorTargetScalarFieldEnum]


  export const CheckResultScalarFieldEnum: {
    id: 'id',
    targetId: 'targetId',
    ok: 'ok',
    latencyMs: 'latencyMs',
    error: 'error',
    checkedAt: 'checkedAt'
  };

  export type CheckResultScalarFieldEnum = (typeof CheckResultScalarFieldEnum)[keyof typeof CheckResultScalarFieldEnum]


  export const NotificationSettingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    emailRecipients: 'emailRecipients',
    telegramChatId: 'telegramChatId',
    connectToken: 'connectToken',
    dailyDigest: 'dailyDigest',
    monthlyDigest: 'monthlyDigest'
  };

  export type NotificationSettingsScalarFieldEnum = (typeof NotificationSettingsScalarFieldEnum)[keyof typeof NotificationSettingsScalarFieldEnum]


  export const PushDeviceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    expoToken: 'expoToken',
    createdAt: 'createdAt'
  };

  export type PushDeviceScalarFieldEnum = (typeof PushDeviceScalarFieldEnum)[keyof typeof PushDeviceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    monitors?: MonitorTargetListRelationFilter
    notif?: XOR<NotificationSettingsNullableRelationFilter, NotificationSettingsWhereInput> | null
    devices?: PushDeviceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    monitors?: MonitorTargetOrderByRelationAggregateInput
    notif?: NotificationSettingsOrderByWithRelationInput
    devices?: PushDeviceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    monitors?: MonitorTargetListRelationFilter
    notif?: XOR<NotificationSettingsNullableRelationFilter, NotificationSettingsWhereInput> | null
    devices?: PushDeviceListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MonitorTargetWhereInput = {
    AND?: MonitorTargetWhereInput | MonitorTargetWhereInput[]
    OR?: MonitorTargetWhereInput[]
    NOT?: MonitorTargetWhereInput | MonitorTargetWhereInput[]
    id?: StringFilter<"MonitorTarget"> | string
    userId?: StringFilter<"MonitorTarget"> | string
    label?: StringFilter<"MonitorTarget"> | string
    kind?: StringFilter<"MonitorTarget"> | string
    address?: StringFilter<"MonitorTarget"> | string
    port?: IntNullableFilter<"MonitorTarget"> | number | null
    intervalMinutes?: IntFilter<"MonitorTarget"> | number
    enabled?: BoolFilter<"MonitorTarget"> | boolean
    lastCheckedAt?: DateTimeNullableFilter<"MonitorTarget"> | Date | string | null
    createdAt?: DateTimeFilter<"MonitorTarget"> | Date | string
    updatedAt?: DateTimeFilter<"MonitorTarget"> | Date | string
    lastStatus?: StringNullableFilter<"MonitorTarget"> | string | null
    lastAlertAt?: DateTimeNullableFilter<"MonitorTarget"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    checks?: CheckResultListRelationFilter
  }

  export type MonitorTargetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    kind?: SortOrder
    address?: SortOrder
    port?: SortOrderInput | SortOrder
    intervalMinutes?: SortOrder
    enabled?: SortOrder
    lastCheckedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastStatus?: SortOrderInput | SortOrder
    lastAlertAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    checks?: CheckResultOrderByRelationAggregateInput
  }

  export type MonitorTargetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MonitorTargetWhereInput | MonitorTargetWhereInput[]
    OR?: MonitorTargetWhereInput[]
    NOT?: MonitorTargetWhereInput | MonitorTargetWhereInput[]
    userId?: StringFilter<"MonitorTarget"> | string
    label?: StringFilter<"MonitorTarget"> | string
    kind?: StringFilter<"MonitorTarget"> | string
    address?: StringFilter<"MonitorTarget"> | string
    port?: IntNullableFilter<"MonitorTarget"> | number | null
    intervalMinutes?: IntFilter<"MonitorTarget"> | number
    enabled?: BoolFilter<"MonitorTarget"> | boolean
    lastCheckedAt?: DateTimeNullableFilter<"MonitorTarget"> | Date | string | null
    createdAt?: DateTimeFilter<"MonitorTarget"> | Date | string
    updatedAt?: DateTimeFilter<"MonitorTarget"> | Date | string
    lastStatus?: StringNullableFilter<"MonitorTarget"> | string | null
    lastAlertAt?: DateTimeNullableFilter<"MonitorTarget"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    checks?: CheckResultListRelationFilter
  }, "id">

  export type MonitorTargetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    kind?: SortOrder
    address?: SortOrder
    port?: SortOrderInput | SortOrder
    intervalMinutes?: SortOrder
    enabled?: SortOrder
    lastCheckedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastStatus?: SortOrderInput | SortOrder
    lastAlertAt?: SortOrderInput | SortOrder
    _count?: MonitorTargetCountOrderByAggregateInput
    _avg?: MonitorTargetAvgOrderByAggregateInput
    _max?: MonitorTargetMaxOrderByAggregateInput
    _min?: MonitorTargetMinOrderByAggregateInput
    _sum?: MonitorTargetSumOrderByAggregateInput
  }

  export type MonitorTargetScalarWhereWithAggregatesInput = {
    AND?: MonitorTargetScalarWhereWithAggregatesInput | MonitorTargetScalarWhereWithAggregatesInput[]
    OR?: MonitorTargetScalarWhereWithAggregatesInput[]
    NOT?: MonitorTargetScalarWhereWithAggregatesInput | MonitorTargetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MonitorTarget"> | string
    userId?: StringWithAggregatesFilter<"MonitorTarget"> | string
    label?: StringWithAggregatesFilter<"MonitorTarget"> | string
    kind?: StringWithAggregatesFilter<"MonitorTarget"> | string
    address?: StringWithAggregatesFilter<"MonitorTarget"> | string
    port?: IntNullableWithAggregatesFilter<"MonitorTarget"> | number | null
    intervalMinutes?: IntWithAggregatesFilter<"MonitorTarget"> | number
    enabled?: BoolWithAggregatesFilter<"MonitorTarget"> | boolean
    lastCheckedAt?: DateTimeNullableWithAggregatesFilter<"MonitorTarget"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MonitorTarget"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MonitorTarget"> | Date | string
    lastStatus?: StringNullableWithAggregatesFilter<"MonitorTarget"> | string | null
    lastAlertAt?: DateTimeNullableWithAggregatesFilter<"MonitorTarget"> | Date | string | null
  }

  export type CheckResultWhereInput = {
    AND?: CheckResultWhereInput | CheckResultWhereInput[]
    OR?: CheckResultWhereInput[]
    NOT?: CheckResultWhereInput | CheckResultWhereInput[]
    id?: StringFilter<"CheckResult"> | string
    targetId?: StringFilter<"CheckResult"> | string
    ok?: BoolFilter<"CheckResult"> | boolean
    latencyMs?: IntNullableFilter<"CheckResult"> | number | null
    error?: StringNullableFilter<"CheckResult"> | string | null
    checkedAt?: DateTimeFilter<"CheckResult"> | Date | string
    target?: XOR<MonitorTargetRelationFilter, MonitorTargetWhereInput>
  }

  export type CheckResultOrderByWithRelationInput = {
    id?: SortOrder
    targetId?: SortOrder
    ok?: SortOrder
    latencyMs?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    checkedAt?: SortOrder
    target?: MonitorTargetOrderByWithRelationInput
  }

  export type CheckResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CheckResultWhereInput | CheckResultWhereInput[]
    OR?: CheckResultWhereInput[]
    NOT?: CheckResultWhereInput | CheckResultWhereInput[]
    targetId?: StringFilter<"CheckResult"> | string
    ok?: BoolFilter<"CheckResult"> | boolean
    latencyMs?: IntNullableFilter<"CheckResult"> | number | null
    error?: StringNullableFilter<"CheckResult"> | string | null
    checkedAt?: DateTimeFilter<"CheckResult"> | Date | string
    target?: XOR<MonitorTargetRelationFilter, MonitorTargetWhereInput>
  }, "id">

  export type CheckResultOrderByWithAggregationInput = {
    id?: SortOrder
    targetId?: SortOrder
    ok?: SortOrder
    latencyMs?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    checkedAt?: SortOrder
    _count?: CheckResultCountOrderByAggregateInput
    _avg?: CheckResultAvgOrderByAggregateInput
    _max?: CheckResultMaxOrderByAggregateInput
    _min?: CheckResultMinOrderByAggregateInput
    _sum?: CheckResultSumOrderByAggregateInput
  }

  export type CheckResultScalarWhereWithAggregatesInput = {
    AND?: CheckResultScalarWhereWithAggregatesInput | CheckResultScalarWhereWithAggregatesInput[]
    OR?: CheckResultScalarWhereWithAggregatesInput[]
    NOT?: CheckResultScalarWhereWithAggregatesInput | CheckResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CheckResult"> | string
    targetId?: StringWithAggregatesFilter<"CheckResult"> | string
    ok?: BoolWithAggregatesFilter<"CheckResult"> | boolean
    latencyMs?: IntNullableWithAggregatesFilter<"CheckResult"> | number | null
    error?: StringNullableWithAggregatesFilter<"CheckResult"> | string | null
    checkedAt?: DateTimeWithAggregatesFilter<"CheckResult"> | Date | string
  }

  export type NotificationSettingsWhereInput = {
    AND?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    OR?: NotificationSettingsWhereInput[]
    NOT?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    id?: StringFilter<"NotificationSettings"> | string
    userId?: StringFilter<"NotificationSettings"> | string
    emailRecipients?: StringNullableListFilter<"NotificationSettings">
    telegramChatId?: StringNullableFilter<"NotificationSettings"> | string | null
    connectToken?: StringNullableFilter<"NotificationSettings"> | string | null
    dailyDigest?: BoolFilter<"NotificationSettings"> | boolean
    monthlyDigest?: BoolFilter<"NotificationSettings"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationSettingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    emailRecipients?: SortOrder
    telegramChatId?: SortOrderInput | SortOrder
    connectToken?: SortOrderInput | SortOrder
    dailyDigest?: SortOrder
    monthlyDigest?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    OR?: NotificationSettingsWhereInput[]
    NOT?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    emailRecipients?: StringNullableListFilter<"NotificationSettings">
    telegramChatId?: StringNullableFilter<"NotificationSettings"> | string | null
    connectToken?: StringNullableFilter<"NotificationSettings"> | string | null
    dailyDigest?: BoolFilter<"NotificationSettings"> | boolean
    monthlyDigest?: BoolFilter<"NotificationSettings"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type NotificationSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    emailRecipients?: SortOrder
    telegramChatId?: SortOrderInput | SortOrder
    connectToken?: SortOrderInput | SortOrder
    dailyDigest?: SortOrder
    monthlyDigest?: SortOrder
    _count?: NotificationSettingsCountOrderByAggregateInput
    _max?: NotificationSettingsMaxOrderByAggregateInput
    _min?: NotificationSettingsMinOrderByAggregateInput
  }

  export type NotificationSettingsScalarWhereWithAggregatesInput = {
    AND?: NotificationSettingsScalarWhereWithAggregatesInput | NotificationSettingsScalarWhereWithAggregatesInput[]
    OR?: NotificationSettingsScalarWhereWithAggregatesInput[]
    NOT?: NotificationSettingsScalarWhereWithAggregatesInput | NotificationSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationSettings"> | string
    userId?: StringWithAggregatesFilter<"NotificationSettings"> | string
    emailRecipients?: StringNullableListFilter<"NotificationSettings">
    telegramChatId?: StringNullableWithAggregatesFilter<"NotificationSettings"> | string | null
    connectToken?: StringNullableWithAggregatesFilter<"NotificationSettings"> | string | null
    dailyDigest?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    monthlyDigest?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
  }

  export type PushDeviceWhereInput = {
    AND?: PushDeviceWhereInput | PushDeviceWhereInput[]
    OR?: PushDeviceWhereInput[]
    NOT?: PushDeviceWhereInput | PushDeviceWhereInput[]
    id?: StringFilter<"PushDevice"> | string
    userId?: StringFilter<"PushDevice"> | string
    expoToken?: StringFilter<"PushDevice"> | string
    createdAt?: DateTimeFilter<"PushDevice"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PushDeviceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    expoToken?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PushDeviceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    expoToken?: string
    AND?: PushDeviceWhereInput | PushDeviceWhereInput[]
    OR?: PushDeviceWhereInput[]
    NOT?: PushDeviceWhereInput | PushDeviceWhereInput[]
    userId?: StringFilter<"PushDevice"> | string
    createdAt?: DateTimeFilter<"PushDevice"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "expoToken">

  export type PushDeviceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    expoToken?: SortOrder
    createdAt?: SortOrder
    _count?: PushDeviceCountOrderByAggregateInput
    _max?: PushDeviceMaxOrderByAggregateInput
    _min?: PushDeviceMinOrderByAggregateInput
  }

  export type PushDeviceScalarWhereWithAggregatesInput = {
    AND?: PushDeviceScalarWhereWithAggregatesInput | PushDeviceScalarWhereWithAggregatesInput[]
    OR?: PushDeviceScalarWhereWithAggregatesInput[]
    NOT?: PushDeviceScalarWhereWithAggregatesInput | PushDeviceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PushDevice"> | string
    userId?: StringWithAggregatesFilter<"PushDevice"> | string
    expoToken?: StringWithAggregatesFilter<"PushDevice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PushDevice"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    monitors?: MonitorTargetCreateNestedManyWithoutUserInput
    notif?: NotificationSettingsCreateNestedOneWithoutUserInput
    devices?: PushDeviceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    monitors?: MonitorTargetUncheckedCreateNestedManyWithoutUserInput
    notif?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    devices?: PushDeviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitors?: MonitorTargetUpdateManyWithoutUserNestedInput
    notif?: NotificationSettingsUpdateOneWithoutUserNestedInput
    devices?: PushDeviceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitors?: MonitorTargetUncheckedUpdateManyWithoutUserNestedInput
    notif?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    devices?: PushDeviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonitorTargetCreateInput = {
    id?: string
    label: string
    kind: string
    address: string
    port?: number | null
    intervalMinutes?: number
    enabled?: boolean
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastStatus?: string | null
    lastAlertAt?: Date | string | null
    user: UserCreateNestedOneWithoutMonitorsInput
    checks?: CheckResultCreateNestedManyWithoutTargetInput
  }

  export type MonitorTargetUncheckedCreateInput = {
    id?: string
    userId: string
    label: string
    kind: string
    address: string
    port?: number | null
    intervalMinutes?: number
    enabled?: boolean
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastStatus?: string | null
    lastAlertAt?: Date | string | null
    checks?: CheckResultUncheckedCreateNestedManyWithoutTargetInput
  }

  export type MonitorTargetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutMonitorsNestedInput
    checks?: CheckResultUpdateManyWithoutTargetNestedInput
  }

  export type MonitorTargetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checks?: CheckResultUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type MonitorTargetCreateManyInput = {
    id?: string
    userId: string
    label: string
    kind: string
    address: string
    port?: number | null
    intervalMinutes?: number
    enabled?: boolean
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastStatus?: string | null
    lastAlertAt?: Date | string | null
  }

  export type MonitorTargetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MonitorTargetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CheckResultCreateInput = {
    id?: string
    ok: boolean
    latencyMs?: number | null
    error?: string | null
    checkedAt?: Date | string
    target: MonitorTargetCreateNestedOneWithoutChecksInput
  }

  export type CheckResultUncheckedCreateInput = {
    id?: string
    targetId: string
    ok: boolean
    latencyMs?: number | null
    error?: string | null
    checkedAt?: Date | string
  }

  export type CheckResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ok?: BoolFieldUpdateOperationsInput | boolean
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    target?: MonitorTargetUpdateOneRequiredWithoutChecksNestedInput
  }

  export type CheckResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    ok?: BoolFieldUpdateOperationsInput | boolean
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckResultCreateManyInput = {
    id?: string
    targetId: string
    ok: boolean
    latencyMs?: number | null
    error?: string | null
    checkedAt?: Date | string
  }

  export type CheckResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ok?: BoolFieldUpdateOperationsInput | boolean
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    ok?: BoolFieldUpdateOperationsInput | boolean
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsCreateInput = {
    id?: string
    emailRecipients?: NotificationSettingsCreateemailRecipientsInput | string[]
    telegramChatId?: string | null
    connectToken?: string | null
    dailyDigest?: boolean
    monthlyDigest?: boolean
    user: UserCreateNestedOneWithoutNotifInput
  }

  export type NotificationSettingsUncheckedCreateInput = {
    id?: string
    userId: string
    emailRecipients?: NotificationSettingsCreateemailRecipientsInput | string[]
    telegramChatId?: string | null
    connectToken?: string | null
    dailyDigest?: boolean
    monthlyDigest?: boolean
  }

  export type NotificationSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailRecipients?: NotificationSettingsUpdateemailRecipientsInput | string[]
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    connectToken?: NullableStringFieldUpdateOperationsInput | string | null
    dailyDigest?: BoolFieldUpdateOperationsInput | boolean
    monthlyDigest?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotifNestedInput
  }

  export type NotificationSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emailRecipients?: NotificationSettingsUpdateemailRecipientsInput | string[]
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    connectToken?: NullableStringFieldUpdateOperationsInput | string | null
    dailyDigest?: BoolFieldUpdateOperationsInput | boolean
    monthlyDigest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationSettingsCreateManyInput = {
    id?: string
    userId: string
    emailRecipients?: NotificationSettingsCreateemailRecipientsInput | string[]
    telegramChatId?: string | null
    connectToken?: string | null
    dailyDigest?: boolean
    monthlyDigest?: boolean
  }

  export type NotificationSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailRecipients?: NotificationSettingsUpdateemailRecipientsInput | string[]
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    connectToken?: NullableStringFieldUpdateOperationsInput | string | null
    dailyDigest?: BoolFieldUpdateOperationsInput | boolean
    monthlyDigest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emailRecipients?: NotificationSettingsUpdateemailRecipientsInput | string[]
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    connectToken?: NullableStringFieldUpdateOperationsInput | string | null
    dailyDigest?: BoolFieldUpdateOperationsInput | boolean
    monthlyDigest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PushDeviceCreateInput = {
    id?: string
    expoToken: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutDevicesInput
  }

  export type PushDeviceUncheckedCreateInput = {
    id?: string
    userId: string
    expoToken: string
    createdAt?: Date | string
  }

  export type PushDeviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expoToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type PushDeviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expoToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushDeviceCreateManyInput = {
    id?: string
    userId: string
    expoToken: string
    createdAt?: Date | string
  }

  export type PushDeviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expoToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushDeviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expoToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MonitorTargetListRelationFilter = {
    every?: MonitorTargetWhereInput
    some?: MonitorTargetWhereInput
    none?: MonitorTargetWhereInput
  }

  export type NotificationSettingsNullableRelationFilter = {
    is?: NotificationSettingsWhereInput | null
    isNot?: NotificationSettingsWhereInput | null
  }

  export type PushDeviceListRelationFilter = {
    every?: PushDeviceWhereInput
    some?: PushDeviceWhereInput
    none?: PushDeviceWhereInput
  }

  export type MonitorTargetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PushDeviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CheckResultListRelationFilter = {
    every?: CheckResultWhereInput
    some?: CheckResultWhereInput
    none?: CheckResultWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CheckResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MonitorTargetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    kind?: SortOrder
    address?: SortOrder
    port?: SortOrder
    intervalMinutes?: SortOrder
    enabled?: SortOrder
    lastCheckedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastStatus?: SortOrder
    lastAlertAt?: SortOrder
  }

  export type MonitorTargetAvgOrderByAggregateInput = {
    port?: SortOrder
    intervalMinutes?: SortOrder
  }

  export type MonitorTargetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    kind?: SortOrder
    address?: SortOrder
    port?: SortOrder
    intervalMinutes?: SortOrder
    enabled?: SortOrder
    lastCheckedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastStatus?: SortOrder
    lastAlertAt?: SortOrder
  }

  export type MonitorTargetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    kind?: SortOrder
    address?: SortOrder
    port?: SortOrder
    intervalMinutes?: SortOrder
    enabled?: SortOrder
    lastCheckedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastStatus?: SortOrder
    lastAlertAt?: SortOrder
  }

  export type MonitorTargetSumOrderByAggregateInput = {
    port?: SortOrder
    intervalMinutes?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type MonitorTargetRelationFilter = {
    is?: MonitorTargetWhereInput
    isNot?: MonitorTargetWhereInput
  }

  export type CheckResultCountOrderByAggregateInput = {
    id?: SortOrder
    targetId?: SortOrder
    ok?: SortOrder
    latencyMs?: SortOrder
    error?: SortOrder
    checkedAt?: SortOrder
  }

  export type CheckResultAvgOrderByAggregateInput = {
    latencyMs?: SortOrder
  }

  export type CheckResultMaxOrderByAggregateInput = {
    id?: SortOrder
    targetId?: SortOrder
    ok?: SortOrder
    latencyMs?: SortOrder
    error?: SortOrder
    checkedAt?: SortOrder
  }

  export type CheckResultMinOrderByAggregateInput = {
    id?: SortOrder
    targetId?: SortOrder
    ok?: SortOrder
    latencyMs?: SortOrder
    error?: SortOrder
    checkedAt?: SortOrder
  }

  export type CheckResultSumOrderByAggregateInput = {
    latencyMs?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type NotificationSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    emailRecipients?: SortOrder
    telegramChatId?: SortOrder
    connectToken?: SortOrder
    dailyDigest?: SortOrder
    monthlyDigest?: SortOrder
  }

  export type NotificationSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramChatId?: SortOrder
    connectToken?: SortOrder
    dailyDigest?: SortOrder
    monthlyDigest?: SortOrder
  }

  export type NotificationSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    telegramChatId?: SortOrder
    connectToken?: SortOrder
    dailyDigest?: SortOrder
    monthlyDigest?: SortOrder
  }

  export type PushDeviceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expoToken?: SortOrder
    createdAt?: SortOrder
  }

  export type PushDeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expoToken?: SortOrder
    createdAt?: SortOrder
  }

  export type PushDeviceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expoToken?: SortOrder
    createdAt?: SortOrder
  }

  export type MonitorTargetCreateNestedManyWithoutUserInput = {
    create?: XOR<MonitorTargetCreateWithoutUserInput, MonitorTargetUncheckedCreateWithoutUserInput> | MonitorTargetCreateWithoutUserInput[] | MonitorTargetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonitorTargetCreateOrConnectWithoutUserInput | MonitorTargetCreateOrConnectWithoutUserInput[]
    createMany?: MonitorTargetCreateManyUserInputEnvelope
    connect?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
  }

  export type NotificationSettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutUserInput
    connect?: NotificationSettingsWhereUniqueInput
  }

  export type PushDeviceCreateNestedManyWithoutUserInput = {
    create?: XOR<PushDeviceCreateWithoutUserInput, PushDeviceUncheckedCreateWithoutUserInput> | PushDeviceCreateWithoutUserInput[] | PushDeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PushDeviceCreateOrConnectWithoutUserInput | PushDeviceCreateOrConnectWithoutUserInput[]
    createMany?: PushDeviceCreateManyUserInputEnvelope
    connect?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
  }

  export type MonitorTargetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MonitorTargetCreateWithoutUserInput, MonitorTargetUncheckedCreateWithoutUserInput> | MonitorTargetCreateWithoutUserInput[] | MonitorTargetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonitorTargetCreateOrConnectWithoutUserInput | MonitorTargetCreateOrConnectWithoutUserInput[]
    createMany?: MonitorTargetCreateManyUserInputEnvelope
    connect?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
  }

  export type NotificationSettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutUserInput
    connect?: NotificationSettingsWhereUniqueInput
  }

  export type PushDeviceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PushDeviceCreateWithoutUserInput, PushDeviceUncheckedCreateWithoutUserInput> | PushDeviceCreateWithoutUserInput[] | PushDeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PushDeviceCreateOrConnectWithoutUserInput | PushDeviceCreateOrConnectWithoutUserInput[]
    createMany?: PushDeviceCreateManyUserInputEnvelope
    connect?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MonitorTargetUpdateManyWithoutUserNestedInput = {
    create?: XOR<MonitorTargetCreateWithoutUserInput, MonitorTargetUncheckedCreateWithoutUserInput> | MonitorTargetCreateWithoutUserInput[] | MonitorTargetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonitorTargetCreateOrConnectWithoutUserInput | MonitorTargetCreateOrConnectWithoutUserInput[]
    upsert?: MonitorTargetUpsertWithWhereUniqueWithoutUserInput | MonitorTargetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MonitorTargetCreateManyUserInputEnvelope
    set?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
    disconnect?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
    delete?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
    connect?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
    update?: MonitorTargetUpdateWithWhereUniqueWithoutUserInput | MonitorTargetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MonitorTargetUpdateManyWithWhereWithoutUserInput | MonitorTargetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MonitorTargetScalarWhereInput | MonitorTargetScalarWhereInput[]
  }

  export type NotificationSettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutUserInput
    upsert?: NotificationSettingsUpsertWithoutUserInput
    disconnect?: NotificationSettingsWhereInput | boolean
    delete?: NotificationSettingsWhereInput | boolean
    connect?: NotificationSettingsWhereUniqueInput
    update?: XOR<XOR<NotificationSettingsUpdateToOneWithWhereWithoutUserInput, NotificationSettingsUpdateWithoutUserInput>, NotificationSettingsUncheckedUpdateWithoutUserInput>
  }

  export type PushDeviceUpdateManyWithoutUserNestedInput = {
    create?: XOR<PushDeviceCreateWithoutUserInput, PushDeviceUncheckedCreateWithoutUserInput> | PushDeviceCreateWithoutUserInput[] | PushDeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PushDeviceCreateOrConnectWithoutUserInput | PushDeviceCreateOrConnectWithoutUserInput[]
    upsert?: PushDeviceUpsertWithWhereUniqueWithoutUserInput | PushDeviceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PushDeviceCreateManyUserInputEnvelope
    set?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
    disconnect?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
    delete?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
    connect?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
    update?: PushDeviceUpdateWithWhereUniqueWithoutUserInput | PushDeviceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PushDeviceUpdateManyWithWhereWithoutUserInput | PushDeviceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PushDeviceScalarWhereInput | PushDeviceScalarWhereInput[]
  }

  export type MonitorTargetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MonitorTargetCreateWithoutUserInput, MonitorTargetUncheckedCreateWithoutUserInput> | MonitorTargetCreateWithoutUserInput[] | MonitorTargetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonitorTargetCreateOrConnectWithoutUserInput | MonitorTargetCreateOrConnectWithoutUserInput[]
    upsert?: MonitorTargetUpsertWithWhereUniqueWithoutUserInput | MonitorTargetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MonitorTargetCreateManyUserInputEnvelope
    set?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
    disconnect?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
    delete?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
    connect?: MonitorTargetWhereUniqueInput | MonitorTargetWhereUniqueInput[]
    update?: MonitorTargetUpdateWithWhereUniqueWithoutUserInput | MonitorTargetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MonitorTargetUpdateManyWithWhereWithoutUserInput | MonitorTargetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MonitorTargetScalarWhereInput | MonitorTargetScalarWhereInput[]
  }

  export type NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutUserInput
    upsert?: NotificationSettingsUpsertWithoutUserInput
    disconnect?: NotificationSettingsWhereInput | boolean
    delete?: NotificationSettingsWhereInput | boolean
    connect?: NotificationSettingsWhereUniqueInput
    update?: XOR<XOR<NotificationSettingsUpdateToOneWithWhereWithoutUserInput, NotificationSettingsUpdateWithoutUserInput>, NotificationSettingsUncheckedUpdateWithoutUserInput>
  }

  export type PushDeviceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PushDeviceCreateWithoutUserInput, PushDeviceUncheckedCreateWithoutUserInput> | PushDeviceCreateWithoutUserInput[] | PushDeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PushDeviceCreateOrConnectWithoutUserInput | PushDeviceCreateOrConnectWithoutUserInput[]
    upsert?: PushDeviceUpsertWithWhereUniqueWithoutUserInput | PushDeviceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PushDeviceCreateManyUserInputEnvelope
    set?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
    disconnect?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
    delete?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
    connect?: PushDeviceWhereUniqueInput | PushDeviceWhereUniqueInput[]
    update?: PushDeviceUpdateWithWhereUniqueWithoutUserInput | PushDeviceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PushDeviceUpdateManyWithWhereWithoutUserInput | PushDeviceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PushDeviceScalarWhereInput | PushDeviceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMonitorsInput = {
    create?: XOR<UserCreateWithoutMonitorsInput, UserUncheckedCreateWithoutMonitorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonitorsInput
    connect?: UserWhereUniqueInput
  }

  export type CheckResultCreateNestedManyWithoutTargetInput = {
    create?: XOR<CheckResultCreateWithoutTargetInput, CheckResultUncheckedCreateWithoutTargetInput> | CheckResultCreateWithoutTargetInput[] | CheckResultUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: CheckResultCreateOrConnectWithoutTargetInput | CheckResultCreateOrConnectWithoutTargetInput[]
    createMany?: CheckResultCreateManyTargetInputEnvelope
    connect?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
  }

  export type CheckResultUncheckedCreateNestedManyWithoutTargetInput = {
    create?: XOR<CheckResultCreateWithoutTargetInput, CheckResultUncheckedCreateWithoutTargetInput> | CheckResultCreateWithoutTargetInput[] | CheckResultUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: CheckResultCreateOrConnectWithoutTargetInput | CheckResultCreateOrConnectWithoutTargetInput[]
    createMany?: CheckResultCreateManyTargetInputEnvelope
    connect?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutMonitorsNestedInput = {
    create?: XOR<UserCreateWithoutMonitorsInput, UserUncheckedCreateWithoutMonitorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonitorsInput
    upsert?: UserUpsertWithoutMonitorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMonitorsInput, UserUpdateWithoutMonitorsInput>, UserUncheckedUpdateWithoutMonitorsInput>
  }

  export type CheckResultUpdateManyWithoutTargetNestedInput = {
    create?: XOR<CheckResultCreateWithoutTargetInput, CheckResultUncheckedCreateWithoutTargetInput> | CheckResultCreateWithoutTargetInput[] | CheckResultUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: CheckResultCreateOrConnectWithoutTargetInput | CheckResultCreateOrConnectWithoutTargetInput[]
    upsert?: CheckResultUpsertWithWhereUniqueWithoutTargetInput | CheckResultUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: CheckResultCreateManyTargetInputEnvelope
    set?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
    disconnect?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
    delete?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
    connect?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
    update?: CheckResultUpdateWithWhereUniqueWithoutTargetInput | CheckResultUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: CheckResultUpdateManyWithWhereWithoutTargetInput | CheckResultUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: CheckResultScalarWhereInput | CheckResultScalarWhereInput[]
  }

  export type CheckResultUncheckedUpdateManyWithoutTargetNestedInput = {
    create?: XOR<CheckResultCreateWithoutTargetInput, CheckResultUncheckedCreateWithoutTargetInput> | CheckResultCreateWithoutTargetInput[] | CheckResultUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: CheckResultCreateOrConnectWithoutTargetInput | CheckResultCreateOrConnectWithoutTargetInput[]
    upsert?: CheckResultUpsertWithWhereUniqueWithoutTargetInput | CheckResultUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: CheckResultCreateManyTargetInputEnvelope
    set?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
    disconnect?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
    delete?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
    connect?: CheckResultWhereUniqueInput | CheckResultWhereUniqueInput[]
    update?: CheckResultUpdateWithWhereUniqueWithoutTargetInput | CheckResultUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: CheckResultUpdateManyWithWhereWithoutTargetInput | CheckResultUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: CheckResultScalarWhereInput | CheckResultScalarWhereInput[]
  }

  export type MonitorTargetCreateNestedOneWithoutChecksInput = {
    create?: XOR<MonitorTargetCreateWithoutChecksInput, MonitorTargetUncheckedCreateWithoutChecksInput>
    connectOrCreate?: MonitorTargetCreateOrConnectWithoutChecksInput
    connect?: MonitorTargetWhereUniqueInput
  }

  export type MonitorTargetUpdateOneRequiredWithoutChecksNestedInput = {
    create?: XOR<MonitorTargetCreateWithoutChecksInput, MonitorTargetUncheckedCreateWithoutChecksInput>
    connectOrCreate?: MonitorTargetCreateOrConnectWithoutChecksInput
    upsert?: MonitorTargetUpsertWithoutChecksInput
    connect?: MonitorTargetWhereUniqueInput
    update?: XOR<XOR<MonitorTargetUpdateToOneWithWhereWithoutChecksInput, MonitorTargetUpdateWithoutChecksInput>, MonitorTargetUncheckedUpdateWithoutChecksInput>
  }

  export type NotificationSettingsCreateemailRecipientsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutNotifInput = {
    create?: XOR<UserCreateWithoutNotifInput, UserUncheckedCreateWithoutNotifInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotifInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationSettingsUpdateemailRecipientsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutNotifNestedInput = {
    create?: XOR<UserCreateWithoutNotifInput, UserUncheckedCreateWithoutNotifInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotifInput
    upsert?: UserUpsertWithoutNotifInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotifInput, UserUpdateWithoutNotifInput>, UserUncheckedUpdateWithoutNotifInput>
  }

  export type UserCreateNestedOneWithoutDevicesInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    upsert?: UserUpsertWithoutDevicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDevicesInput, UserUpdateWithoutDevicesInput>, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type MonitorTargetCreateWithoutUserInput = {
    id?: string
    label: string
    kind: string
    address: string
    port?: number | null
    intervalMinutes?: number
    enabled?: boolean
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastStatus?: string | null
    lastAlertAt?: Date | string | null
    checks?: CheckResultCreateNestedManyWithoutTargetInput
  }

  export type MonitorTargetUncheckedCreateWithoutUserInput = {
    id?: string
    label: string
    kind: string
    address: string
    port?: number | null
    intervalMinutes?: number
    enabled?: boolean
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastStatus?: string | null
    lastAlertAt?: Date | string | null
    checks?: CheckResultUncheckedCreateNestedManyWithoutTargetInput
  }

  export type MonitorTargetCreateOrConnectWithoutUserInput = {
    where: MonitorTargetWhereUniqueInput
    create: XOR<MonitorTargetCreateWithoutUserInput, MonitorTargetUncheckedCreateWithoutUserInput>
  }

  export type MonitorTargetCreateManyUserInputEnvelope = {
    data: MonitorTargetCreateManyUserInput | MonitorTargetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationSettingsCreateWithoutUserInput = {
    id?: string
    emailRecipients?: NotificationSettingsCreateemailRecipientsInput | string[]
    telegramChatId?: string | null
    connectToken?: string | null
    dailyDigest?: boolean
    monthlyDigest?: boolean
  }

  export type NotificationSettingsUncheckedCreateWithoutUserInput = {
    id?: string
    emailRecipients?: NotificationSettingsCreateemailRecipientsInput | string[]
    telegramChatId?: string | null
    connectToken?: string | null
    dailyDigest?: boolean
    monthlyDigest?: boolean
  }

  export type NotificationSettingsCreateOrConnectWithoutUserInput = {
    where: NotificationSettingsWhereUniqueInput
    create: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
  }

  export type PushDeviceCreateWithoutUserInput = {
    id?: string
    expoToken: string
    createdAt?: Date | string
  }

  export type PushDeviceUncheckedCreateWithoutUserInput = {
    id?: string
    expoToken: string
    createdAt?: Date | string
  }

  export type PushDeviceCreateOrConnectWithoutUserInput = {
    where: PushDeviceWhereUniqueInput
    create: XOR<PushDeviceCreateWithoutUserInput, PushDeviceUncheckedCreateWithoutUserInput>
  }

  export type PushDeviceCreateManyUserInputEnvelope = {
    data: PushDeviceCreateManyUserInput | PushDeviceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MonitorTargetUpsertWithWhereUniqueWithoutUserInput = {
    where: MonitorTargetWhereUniqueInput
    update: XOR<MonitorTargetUpdateWithoutUserInput, MonitorTargetUncheckedUpdateWithoutUserInput>
    create: XOR<MonitorTargetCreateWithoutUserInput, MonitorTargetUncheckedCreateWithoutUserInput>
  }

  export type MonitorTargetUpdateWithWhereUniqueWithoutUserInput = {
    where: MonitorTargetWhereUniqueInput
    data: XOR<MonitorTargetUpdateWithoutUserInput, MonitorTargetUncheckedUpdateWithoutUserInput>
  }

  export type MonitorTargetUpdateManyWithWhereWithoutUserInput = {
    where: MonitorTargetScalarWhereInput
    data: XOR<MonitorTargetUpdateManyMutationInput, MonitorTargetUncheckedUpdateManyWithoutUserInput>
  }

  export type MonitorTargetScalarWhereInput = {
    AND?: MonitorTargetScalarWhereInput | MonitorTargetScalarWhereInput[]
    OR?: MonitorTargetScalarWhereInput[]
    NOT?: MonitorTargetScalarWhereInput | MonitorTargetScalarWhereInput[]
    id?: StringFilter<"MonitorTarget"> | string
    userId?: StringFilter<"MonitorTarget"> | string
    label?: StringFilter<"MonitorTarget"> | string
    kind?: StringFilter<"MonitorTarget"> | string
    address?: StringFilter<"MonitorTarget"> | string
    port?: IntNullableFilter<"MonitorTarget"> | number | null
    intervalMinutes?: IntFilter<"MonitorTarget"> | number
    enabled?: BoolFilter<"MonitorTarget"> | boolean
    lastCheckedAt?: DateTimeNullableFilter<"MonitorTarget"> | Date | string | null
    createdAt?: DateTimeFilter<"MonitorTarget"> | Date | string
    updatedAt?: DateTimeFilter<"MonitorTarget"> | Date | string
    lastStatus?: StringNullableFilter<"MonitorTarget"> | string | null
    lastAlertAt?: DateTimeNullableFilter<"MonitorTarget"> | Date | string | null
  }

  export type NotificationSettingsUpsertWithoutUserInput = {
    update: XOR<NotificationSettingsUpdateWithoutUserInput, NotificationSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationSettingsCreateWithoutUserInput, NotificationSettingsUncheckedCreateWithoutUserInput>
    where?: NotificationSettingsWhereInput
  }

  export type NotificationSettingsUpdateToOneWithWhereWithoutUserInput = {
    where?: NotificationSettingsWhereInput
    data: XOR<NotificationSettingsUpdateWithoutUserInput, NotificationSettingsUncheckedUpdateWithoutUserInput>
  }

  export type NotificationSettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailRecipients?: NotificationSettingsUpdateemailRecipientsInput | string[]
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    connectToken?: NullableStringFieldUpdateOperationsInput | string | null
    dailyDigest?: BoolFieldUpdateOperationsInput | boolean
    monthlyDigest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationSettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailRecipients?: NotificationSettingsUpdateemailRecipientsInput | string[]
    telegramChatId?: NullableStringFieldUpdateOperationsInput | string | null
    connectToken?: NullableStringFieldUpdateOperationsInput | string | null
    dailyDigest?: BoolFieldUpdateOperationsInput | boolean
    monthlyDigest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PushDeviceUpsertWithWhereUniqueWithoutUserInput = {
    where: PushDeviceWhereUniqueInput
    update: XOR<PushDeviceUpdateWithoutUserInput, PushDeviceUncheckedUpdateWithoutUserInput>
    create: XOR<PushDeviceCreateWithoutUserInput, PushDeviceUncheckedCreateWithoutUserInput>
  }

  export type PushDeviceUpdateWithWhereUniqueWithoutUserInput = {
    where: PushDeviceWhereUniqueInput
    data: XOR<PushDeviceUpdateWithoutUserInput, PushDeviceUncheckedUpdateWithoutUserInput>
  }

  export type PushDeviceUpdateManyWithWhereWithoutUserInput = {
    where: PushDeviceScalarWhereInput
    data: XOR<PushDeviceUpdateManyMutationInput, PushDeviceUncheckedUpdateManyWithoutUserInput>
  }

  export type PushDeviceScalarWhereInput = {
    AND?: PushDeviceScalarWhereInput | PushDeviceScalarWhereInput[]
    OR?: PushDeviceScalarWhereInput[]
    NOT?: PushDeviceScalarWhereInput | PushDeviceScalarWhereInput[]
    id?: StringFilter<"PushDevice"> | string
    userId?: StringFilter<"PushDevice"> | string
    expoToken?: StringFilter<"PushDevice"> | string
    createdAt?: DateTimeFilter<"PushDevice"> | Date | string
  }

  export type UserCreateWithoutMonitorsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    notif?: NotificationSettingsCreateNestedOneWithoutUserInput
    devices?: PushDeviceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMonitorsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    notif?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
    devices?: PushDeviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMonitorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMonitorsInput, UserUncheckedCreateWithoutMonitorsInput>
  }

  export type CheckResultCreateWithoutTargetInput = {
    id?: string
    ok: boolean
    latencyMs?: number | null
    error?: string | null
    checkedAt?: Date | string
  }

  export type CheckResultUncheckedCreateWithoutTargetInput = {
    id?: string
    ok: boolean
    latencyMs?: number | null
    error?: string | null
    checkedAt?: Date | string
  }

  export type CheckResultCreateOrConnectWithoutTargetInput = {
    where: CheckResultWhereUniqueInput
    create: XOR<CheckResultCreateWithoutTargetInput, CheckResultUncheckedCreateWithoutTargetInput>
  }

  export type CheckResultCreateManyTargetInputEnvelope = {
    data: CheckResultCreateManyTargetInput | CheckResultCreateManyTargetInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMonitorsInput = {
    update: XOR<UserUpdateWithoutMonitorsInput, UserUncheckedUpdateWithoutMonitorsInput>
    create: XOR<UserCreateWithoutMonitorsInput, UserUncheckedCreateWithoutMonitorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMonitorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMonitorsInput, UserUncheckedUpdateWithoutMonitorsInput>
  }

  export type UserUpdateWithoutMonitorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notif?: NotificationSettingsUpdateOneWithoutUserNestedInput
    devices?: PushDeviceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMonitorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notif?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
    devices?: PushDeviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CheckResultUpsertWithWhereUniqueWithoutTargetInput = {
    where: CheckResultWhereUniqueInput
    update: XOR<CheckResultUpdateWithoutTargetInput, CheckResultUncheckedUpdateWithoutTargetInput>
    create: XOR<CheckResultCreateWithoutTargetInput, CheckResultUncheckedCreateWithoutTargetInput>
  }

  export type CheckResultUpdateWithWhereUniqueWithoutTargetInput = {
    where: CheckResultWhereUniqueInput
    data: XOR<CheckResultUpdateWithoutTargetInput, CheckResultUncheckedUpdateWithoutTargetInput>
  }

  export type CheckResultUpdateManyWithWhereWithoutTargetInput = {
    where: CheckResultScalarWhereInput
    data: XOR<CheckResultUpdateManyMutationInput, CheckResultUncheckedUpdateManyWithoutTargetInput>
  }

  export type CheckResultScalarWhereInput = {
    AND?: CheckResultScalarWhereInput | CheckResultScalarWhereInput[]
    OR?: CheckResultScalarWhereInput[]
    NOT?: CheckResultScalarWhereInput | CheckResultScalarWhereInput[]
    id?: StringFilter<"CheckResult"> | string
    targetId?: StringFilter<"CheckResult"> | string
    ok?: BoolFilter<"CheckResult"> | boolean
    latencyMs?: IntNullableFilter<"CheckResult"> | number | null
    error?: StringNullableFilter<"CheckResult"> | string | null
    checkedAt?: DateTimeFilter<"CheckResult"> | Date | string
  }

  export type MonitorTargetCreateWithoutChecksInput = {
    id?: string
    label: string
    kind: string
    address: string
    port?: number | null
    intervalMinutes?: number
    enabled?: boolean
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastStatus?: string | null
    lastAlertAt?: Date | string | null
    user: UserCreateNestedOneWithoutMonitorsInput
  }

  export type MonitorTargetUncheckedCreateWithoutChecksInput = {
    id?: string
    userId: string
    label: string
    kind: string
    address: string
    port?: number | null
    intervalMinutes?: number
    enabled?: boolean
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastStatus?: string | null
    lastAlertAt?: Date | string | null
  }

  export type MonitorTargetCreateOrConnectWithoutChecksInput = {
    where: MonitorTargetWhereUniqueInput
    create: XOR<MonitorTargetCreateWithoutChecksInput, MonitorTargetUncheckedCreateWithoutChecksInput>
  }

  export type MonitorTargetUpsertWithoutChecksInput = {
    update: XOR<MonitorTargetUpdateWithoutChecksInput, MonitorTargetUncheckedUpdateWithoutChecksInput>
    create: XOR<MonitorTargetCreateWithoutChecksInput, MonitorTargetUncheckedCreateWithoutChecksInput>
    where?: MonitorTargetWhereInput
  }

  export type MonitorTargetUpdateToOneWithWhereWithoutChecksInput = {
    where?: MonitorTargetWhereInput
    data: XOR<MonitorTargetUpdateWithoutChecksInput, MonitorTargetUncheckedUpdateWithoutChecksInput>
  }

  export type MonitorTargetUpdateWithoutChecksInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutMonitorsNestedInput
  }

  export type MonitorTargetUncheckedUpdateWithoutChecksInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutNotifInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    monitors?: MonitorTargetCreateNestedManyWithoutUserInput
    devices?: PushDeviceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotifInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    monitors?: MonitorTargetUncheckedCreateNestedManyWithoutUserInput
    devices?: PushDeviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotifInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotifInput, UserUncheckedCreateWithoutNotifInput>
  }

  export type UserUpsertWithoutNotifInput = {
    update: XOR<UserUpdateWithoutNotifInput, UserUncheckedUpdateWithoutNotifInput>
    create: XOR<UserCreateWithoutNotifInput, UserUncheckedCreateWithoutNotifInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotifInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotifInput, UserUncheckedUpdateWithoutNotifInput>
  }

  export type UserUpdateWithoutNotifInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitors?: MonitorTargetUpdateManyWithoutUserNestedInput
    devices?: PushDeviceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotifInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitors?: MonitorTargetUncheckedUpdateManyWithoutUserNestedInput
    devices?: PushDeviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDevicesInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    monitors?: MonitorTargetCreateNestedManyWithoutUserInput
    notif?: NotificationSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDevicesInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    monitors?: MonitorTargetUncheckedCreateNestedManyWithoutUserInput
    notif?: NotificationSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDevicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
  }

  export type UserUpsertWithoutDevicesInput = {
    update: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDevicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type UserUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitors?: MonitorTargetUpdateManyWithoutUserNestedInput
    notif?: NotificationSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitors?: MonitorTargetUncheckedUpdateManyWithoutUserNestedInput
    notif?: NotificationSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type MonitorTargetCreateManyUserInput = {
    id?: string
    label: string
    kind: string
    address: string
    port?: number | null
    intervalMinutes?: number
    enabled?: boolean
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastStatus?: string | null
    lastAlertAt?: Date | string | null
  }

  export type PushDeviceCreateManyUserInput = {
    id?: string
    expoToken: string
    createdAt?: Date | string
  }

  export type MonitorTargetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checks?: CheckResultUpdateManyWithoutTargetNestedInput
  }

  export type MonitorTargetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checks?: CheckResultUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type MonitorTargetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    port?: NullableIntFieldUpdateOperationsInput | number | null
    intervalMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastStatus?: NullableStringFieldUpdateOperationsInput | string | null
    lastAlertAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PushDeviceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expoToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushDeviceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expoToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PushDeviceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expoToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckResultCreateManyTargetInput = {
    id?: string
    ok: boolean
    latencyMs?: number | null
    error?: string | null
    checkedAt?: Date | string
  }

  export type CheckResultUpdateWithoutTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    ok?: BoolFieldUpdateOperationsInput | boolean
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckResultUncheckedUpdateWithoutTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    ok?: BoolFieldUpdateOperationsInput | boolean
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckResultUncheckedUpdateManyWithoutTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    ok?: BoolFieldUpdateOperationsInput | boolean
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MonitorTargetCountOutputTypeDefaultArgs instead
     */
    export type MonitorTargetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MonitorTargetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MonitorTargetDefaultArgs instead
     */
    export type MonitorTargetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MonitorTargetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CheckResultDefaultArgs instead
     */
    export type CheckResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CheckResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationSettingsDefaultArgs instead
     */
    export type NotificationSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PushDeviceDefaultArgs instead
     */
    export type PushDeviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PushDeviceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}